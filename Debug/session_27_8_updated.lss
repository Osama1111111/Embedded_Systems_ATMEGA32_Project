
session_27_8_updated.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000039ca  00003a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000043b0  00000000  00000000  00003b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000263b  00000000  00000000  00007f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000a6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000a8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000cce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000e06a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000f240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000f400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000f6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e5 59       	subi	r30, 0x95	; 149
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#include "LM35.h"
#include "Uart.h"


int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62

	//you can try any module here

	return 0;
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <SSD_vidInit>:
#include <util/delay.h>
#include "Std_Types.h"


void SSD_vidInit(void)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN1 , DIO_OUTPUT);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN2 , DIO_OUTPUT);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	64 e0       	ldi	r22, 0x04	; 4
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN5 , DIO_OUTPUT);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	65 e0       	ldi	r22, 0x05	; 5
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN6 , DIO_OUTPUT);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	66 e0       	ldi	r22, 0x06	; 6
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN7 , DIO_OUTPUT);
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	67 e0       	ldi	r22, 0x07	; 7
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <SSD_viddisplyNum>:
void SSD_viddisplyNum(u8 num)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	e3 97       	sbiw	r28, 0x33	; 51
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	8b ab       	std	Y+51, r24	; 0x33
	//Dio_vidWriteChanelGroup(DIO_PORTA , 5);

	//num = 25
	u8 loc_secondDigit = (num%10) <<4; //to shift 4 bits to the left
     e90:	8b a9       	ldd	r24, Y+51	; 0x33
     e92:	9a e0       	ldi	r25, 0x0A	; 10
     e94:	69 2f       	mov	r22, r25
     e96:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodqi4>
     e9a:	89 2f       	mov	r24, r25
     e9c:	82 95       	swap	r24
     e9e:	80 7f       	andi	r24, 0xF0	; 240
     ea0:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10) <<4;
     ea2:	8b a9       	ldd	r24, Y+51	; 0x33
     ea4:	9a e0       	ldi	r25, 0x0A	; 10
     ea6:	69 2f       	mov	r22, r25
     ea8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodqi4>
     eac:	82 95       	swap	r24
     eae:	80 7f       	andi	r24, 0xF0	; 240
     eb0:	89 ab       	std	Y+49, r24	; 0x31

	// ENable SSD 1 -> EN1 = HIGH
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN2 , DIO_HIGH);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	// Disable SSD 2 -> EN2 = LOW
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_LOW);
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	// Write first digit
	Dio_vidWriteChanelGroup( DIO_PORTA , loc_firstDigit , SSD_MASK);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	69 a9       	ldd	r22, Y+49	; 0x31
     eca:	4f e0       	ldi	r20, 0x0F	; 15
     ecc:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	aa ef       	ldi	r26, 0xFA	; 250
     ed6:	b3 e4       	ldi	r27, 0x43	; 67
     ed8:	8d a7       	std	Y+45, r24	; 0x2d
     eda:	9e a7       	std	Y+46, r25	; 0x2e
     edc:	af a7       	std	Y+47, r26	; 0x2f
     ede:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
     ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
     ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee6:	98 a9       	ldd	r25, Y+48	; 0x30
     ee8:	2b ea       	ldi	r18, 0xAB	; 171
     eea:	3a ea       	ldi	r19, 0xAA	; 170
     eec:	4a ea       	ldi	r20, 0xAA	; 170
     eee:	50 e4       	ldi	r21, 0x40	; 64
     ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	89 a7       	std	Y+41, r24	; 0x29
     efa:	9a a7       	std	Y+42, r25	; 0x2a
     efc:	ab a7       	std	Y+43, r26	; 0x2b
     efe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f00:	69 a5       	ldd	r22, Y+41	; 0x29
     f02:	7a a5       	ldd	r23, Y+42	; 0x2a
     f04:	8b a5       	ldd	r24, Y+43	; 0x2b
     f06:	9c a5       	ldd	r25, Y+44	; 0x2c
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	1c f4       	brge	.+6      	; 0xf1e <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	88 a7       	std	Y+40, r24	; 0x28
     f1c:	91 c0       	rjmp	.+290    	; 0x1040 <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     f1e:	69 a5       	ldd	r22, Y+41	; 0x29
     f20:	7a a5       	ldd	r23, Y+42	; 0x2a
     f22:	8b a5       	ldd	r24, Y+43	; 0x2b
     f24:	9c a5       	ldd	r25, Y+44	; 0x2c
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	53 e4       	ldi	r21, 0x43	; 67
     f2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f32:	18 16       	cp	r1, r24
     f34:	0c f0       	brlt	.+2      	; 0xf38 <SSD_viddisplyNum+0xbe>
     f36:	7b c0       	rjmp	.+246    	; 0x102e <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     f38:	6d a5       	ldd	r22, Y+45	; 0x2d
     f3a:	7e a5       	ldd	r23, Y+46	; 0x2e
     f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3e:	98 a9       	ldd	r25, Y+48	; 0x30
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a e7       	ldi	r20, 0x7A	; 122
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8c a3       	std	Y+36, r24	; 0x24
     f52:	9d a3       	std	Y+37, r25	; 0x25
     f54:	ae a3       	std	Y+38, r26	; 0x26
     f56:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f58:	6c a1       	ldd	r22, Y+36	; 0x24
     f5a:	7d a1       	ldd	r23, Y+37	; 0x25
     f5c:	8e a1       	ldd	r24, Y+38	; 0x26
     f5e:	9f a1       	ldd	r25, Y+39	; 0x27
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4a e7       	ldi	r20, 0x7A	; 122
     f66:	55 e4       	ldi	r21, 0x45	; 69
     f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	88 a3       	std	Y+32, r24	; 0x20
     f72:	99 a3       	std	Y+33, r25	; 0x21
     f74:	aa a3       	std	Y+34, r26	; 0x22
     f76:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f78:	68 a1       	ldd	r22, Y+32	; 0x20
     f7a:	79 a1       	ldd	r23, Y+33	; 0x21
     f7c:	8a a1       	ldd	r24, Y+34	; 0x22
     f7e:	9b a1       	ldd	r25, Y+35	; 0x23
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	2c f4       	brge	.+10     	; 0xf9a <SSD_viddisplyNum+0x120>
		__ticks = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9f 8f       	std	Y+31, r25	; 0x1f
     f96:	8e 8f       	std	Y+30, r24	; 0x1e
     f98:	3f c0       	rjmp	.+126    	; 0x1018 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
     f9a:	68 a1       	ldd	r22, Y+32	; 0x20
     f9c:	79 a1       	ldd	r23, Y+33	; 0x21
     f9e:	8a a1       	ldd	r24, Y+34	; 0x22
     fa0:	9b a1       	ldd	r25, Y+35	; 0x23
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	57 e4       	ldi	r21, 0x47	; 71
     faa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fae:	18 16       	cp	r1, r24
     fb0:	4c f5       	brge	.+82     	; 0x1004 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	6c a1       	ldd	r22, Y+36	; 0x24
     fb4:	7d a1       	ldd	r23, Y+37	; 0x25
     fb6:	8e a1       	ldd	r24, Y+38	; 0x26
     fb8:	9f a1       	ldd	r25, Y+39	; 0x27
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9f 8f       	std	Y+31, r25	; 0x1f
     fd8:	8e 8f       	std	Y+30, r24	; 0x1e
     fda:	0f c0       	rjmp	.+30     	; 0xffa <SSD_viddisplyNum+0x180>
     fdc:	80 e9       	ldi	r24, 0x90	; 144
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	9d 8f       	std	Y+29, r25	; 0x1d
     fe2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fe6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <SSD_viddisplyNum+0x16e>
     fec:	9d 8f       	std	Y+29, r25	; 0x1d
     fee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9f 8f       	std	Y+31, r25	; 0x1f
     ff8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f7       	brne	.-38     	; 0xfdc <SSD_viddisplyNum+0x162>
    1002:	24 c0       	rjmp	.+72     	; 0x104c <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	68 a1       	ldd	r22, Y+32	; 0x20
    1006:	79 a1       	ldd	r23, Y+33	; 0x21
    1008:	8a a1       	ldd	r24, Y+34	; 0x22
    100a:	9b a1       	ldd	r25, Y+35	; 0x23
    100c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9f 8f       	std	Y+31, r25	; 0x1f
    1016:	8e 8f       	std	Y+30, r24	; 0x1e
    1018:	8e 8d       	ldd	r24, Y+30	; 0x1e
    101a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    101c:	9b 8f       	std	Y+27, r25	; 0x1b
    101e:	8a 8f       	std	Y+26, r24	; 0x1a
    1020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1022:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <SSD_viddisplyNum+0x1aa>
    1028:	9b 8f       	std	Y+27, r25	; 0x1b
    102a:	8a 8f       	std	Y+26, r24	; 0x1a
    102c:	0f c0       	rjmp	.+30     	; 0x104c <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    102e:	69 a5       	ldd	r22, Y+41	; 0x29
    1030:	7a a5       	ldd	r23, Y+42	; 0x2a
    1032:	8b a5       	ldd	r24, Y+43	; 0x2b
    1034:	9c a5       	ldd	r25, Y+44	; 0x2c
    1036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	88 a7       	std	Y+40, r24	; 0x28
    1040:	88 a5       	ldd	r24, Y+40	; 0x28
    1042:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1044:	89 8d       	ldd	r24, Y+25	; 0x19
    1046:	8a 95       	dec	r24
    1048:	f1 f7       	brne	.-4      	; 0x1046 <SSD_viddisplyNum+0x1cc>
    104a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(500);

	// ENable SSD 1 -> EN1 = LOW
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN2 , DIO_LOW);
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	// Disable SSD 2 -> EN2 = HIGH
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_HIGH);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	// Write second digit
	Dio_vidWriteChanelGroup( DIO_PORTA , loc_secondDigit , SSD_MASK);
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	6a a9       	ldd	r22, Y+50	; 0x32
    1064:	4f e0       	ldi	r20, 0x0F	; 15
    1066:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	aa ef       	ldi	r26, 0xFA	; 250
    1070:	b3 e4       	ldi	r27, 0x43	; 67
    1072:	8d 8b       	std	Y+21, r24	; 0x15
    1074:	9e 8b       	std	Y+22, r25	; 0x16
    1076:	af 8b       	std	Y+23, r26	; 0x17
    1078:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    107a:	6d 89       	ldd	r22, Y+21	; 0x15
    107c:	7e 89       	ldd	r23, Y+22	; 0x16
    107e:	8f 89       	ldd	r24, Y+23	; 0x17
    1080:	98 8d       	ldd	r25, Y+24	; 0x18
    1082:	2b ea       	ldi	r18, 0xAB	; 171
    1084:	3a ea       	ldi	r19, 0xAA	; 170
    1086:	4a ea       	ldi	r20, 0xAA	; 170
    1088:	50 e4       	ldi	r21, 0x40	; 64
    108a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	89 8b       	std	Y+17, r24	; 0x11
    1094:	9a 8b       	std	Y+18, r25	; 0x12
    1096:	ab 8b       	std	Y+19, r26	; 0x13
    1098:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    109a:	69 89       	ldd	r22, Y+17	; 0x11
    109c:	7a 89       	ldd	r23, Y+18	; 0x12
    109e:	8b 89       	ldd	r24, Y+19	; 0x13
    10a0:	9c 89       	ldd	r25, Y+20	; 0x14
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	1c f4       	brge	.+6      	; 0x10b8 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	88 8b       	std	Y+16, r24	; 0x10
    10b6:	91 c0       	rjmp	.+290    	; 0x11da <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    10b8:	69 89       	ldd	r22, Y+17	; 0x11
    10ba:	7a 89       	ldd	r23, Y+18	; 0x12
    10bc:	8b 89       	ldd	r24, Y+19	; 0x13
    10be:	9c 89       	ldd	r25, Y+20	; 0x14
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	53 e4       	ldi	r21, 0x43	; 67
    10c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <SSD_viddisplyNum+0x258>
    10d0:	7b c0       	rjmp	.+246    	; 0x11c8 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    10d2:	6d 89       	ldd	r22, Y+21	; 0x15
    10d4:	7e 89       	ldd	r23, Y+22	; 0x16
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	98 8d       	ldd	r25, Y+24	; 0x18
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a e7       	ldi	r20, 0x7A	; 122
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8c 87       	std	Y+12, r24	; 0x0c
    10ec:	9d 87       	std	Y+13, r25	; 0x0d
    10ee:	ae 87       	std	Y+14, r26	; 0x0e
    10f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    10f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    10f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    10f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a e7       	ldi	r20, 0x7A	; 122
    1100:	55 e4       	ldi	r21, 0x45	; 69
    1102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	88 87       	std	Y+8, r24	; 0x08
    110c:	99 87       	std	Y+9, r25	; 0x09
    110e:	aa 87       	std	Y+10, r26	; 0x0a
    1110:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1112:	68 85       	ldd	r22, Y+8	; 0x08
    1114:	79 85       	ldd	r23, Y+9	; 0x09
    1116:	8a 85       	ldd	r24, Y+10	; 0x0a
    1118:	9b 85       	ldd	r25, Y+11	; 0x0b
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9f 83       	std	Y+7, r25	; 0x07
    1130:	8e 83       	std	Y+6, r24	; 0x06
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    1134:	68 85       	ldd	r22, Y+8	; 0x08
    1136:	79 85       	ldd	r23, Y+9	; 0x09
    1138:	8a 85       	ldd	r24, Y+10	; 0x0a
    113a:	9b 85       	ldd	r25, Y+11	; 0x0b
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	6c 85       	ldd	r22, Y+12	; 0x0c
    114e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1150:	8e 85       	ldd	r24, Y+14	; 0x0e
    1152:	9f 85       	ldd	r25, Y+15	; 0x0f
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9f 83       	std	Y+7, r25	; 0x07
    1172:	8e 83       	std	Y+6, r24	; 0x06
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <SSD_viddisplyNum+0x31a>
    1176:	80 e9       	ldi	r24, 0x90	; 144
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	9d 83       	std	Y+5, r25	; 0x05
    117c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <SSD_viddisplyNum+0x308>
    1186:	9d 83       	std	Y+5, r25	; 0x05
    1188:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9f 83       	std	Y+7, r25	; 0x07
    1192:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8e 81       	ldd	r24, Y+6	; 0x06
    1196:	9f 81       	ldd	r25, Y+7	; 0x07
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <SSD_viddisplyNum+0x2fc>
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	68 85       	ldd	r22, Y+8	; 0x08
    11a0:	79 85       	ldd	r23, Y+9	; 0x09
    11a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9f 83       	std	Y+7, r25	; 0x07
    11b0:	8e 83       	std	Y+6, r24	; 0x06
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	9b 83       	std	Y+3, r25	; 0x03
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	9b 81       	ldd	r25, Y+3	; 0x03
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <SSD_viddisplyNum+0x344>
    11c2:	9b 83       	std	Y+3, r25	; 0x03
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11c8:	69 89       	ldd	r22, Y+17	; 0x11
    11ca:	7a 89       	ldd	r23, Y+18	; 0x12
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	88 8b       	std	Y+16, r24	; 0x10
    11da:	88 89       	ldd	r24, Y+16	; 0x10
    11dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	8a 95       	dec	r24
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <SSD_viddisplyNum+0x366>
    11e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);
}
    11e6:	e3 96       	adiw	r28, 0x33	; 51
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <SSD_viddelayWithDisplay_ms>:
void SSD_viddelayWithDisplay_ms(u8 num , u32 delay)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	29 97       	sbiw	r28, 0x09	; 9
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	4e 83       	std	Y+6, r20	; 0x06
    1210:	5f 83       	std	Y+7, r21	; 0x07
    1212:	68 87       	std	Y+8, r22	; 0x08
    1214:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter = 0;
    1216:	19 82       	std	Y+1, r1	; 0x01
    1218:	1a 82       	std	Y+2, r1	; 0x02
    121a:	1b 82       	std	Y+3, r1	; 0x03
    121c:	1c 82       	std	Y+4, r1	; 0x04
	for (loc_iter=0 ; loc_iter<delay ; loc_iter++)
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	1b 82       	std	Y+3, r1	; 0x03
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SSD_viddisplyNum>
	_delay_us(500);
}
void SSD_viddelayWithDisplay_ms(u8 num , u32 delay)
{
	u32 loc_iter = 0;
	for (loc_iter=0 ; loc_iter<delay ; loc_iter++)
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	ab 81       	ldd	r26, Y+3	; 0x03
    1234:	bc 81       	ldd	r27, Y+4	; 0x04
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	a1 1d       	adc	r26, r1
    123a:	b1 1d       	adc	r27, r1
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	ab 83       	std	Y+3, r26	; 0x03
    1242:	bc 83       	std	Y+4, r27	; 0x04
    1244:	29 81       	ldd	r18, Y+1	; 0x01
    1246:	3a 81       	ldd	r19, Y+2	; 0x02
    1248:	4b 81       	ldd	r20, Y+3	; 0x03
    124a:	5c 81       	ldd	r21, Y+4	; 0x04
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	9f 81       	ldd	r25, Y+7	; 0x07
    1250:	a8 85       	ldd	r26, Y+8	; 0x08
    1252:	b9 85       	ldd	r27, Y+9	; 0x09
    1254:	28 17       	cp	r18, r24
    1256:	39 07       	cpc	r19, r25
    1258:	4a 07       	cpc	r20, r26
    125a:	5b 07       	cpc	r21, r27
    125c:	28 f3       	brcs	.-54     	; 0x1228 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    125e:	29 96       	adiw	r28, 0x09	; 9
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	62 e0       	ldi	r22, 0x02	; 2
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	67 e0       	ldi	r22, 0x07	; 7
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	63 e0       	ldi	r22, 0x03	; 3
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <Led_vidledOn+0x6>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3b 83       	std	Y+3, r19	; 0x03
    12b2:	2a 83       	std	Y+2, r18	; 0x02
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	79 f0       	breq	.+30     	; 0x12dc <Led_vidledOn+0x40>
    12be:	2a 81       	ldd	r18, Y+2	; 0x02
    12c0:	3b 81       	ldd	r19, Y+3	; 0x03
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <Led_vidledOn+0x4c>
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	89 f4       	brne	.+34     	; 0x12f2 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	62 e0       	ldi	r22, 0x02	; 2
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	67 e0       	ldi	r22, 0x07	; 7
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	63 e0       	ldi	r22, 0x03	; 3
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
		break;
	}
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Led_vidledOff+0x6>
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3b 83       	std	Y+3, r19	; 0x03
    1314:	2a 83       	std	Y+2, r18	; 0x02
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	9b 81       	ldd	r25, Y+3	; 0x03
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	79 f0       	breq	.+30     	; 0x133e <Led_vidledOff+0x40>
    1320:	2a 81       	ldd	r18, Y+2	; 0x02
    1322:	3b 81       	ldd	r19, Y+3	; 0x03
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	81 f0       	breq	.+32     	; 0x134a <Led_vidledOff+0x4c>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	89 f4       	brne	.+34     	; 0x1354 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	62 e0       	ldi	r22, 0x02	; 2
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    133c:	0b c0       	rjmp	.+22     	; 0x1354 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	67 e0       	ldi	r22, 0x07	; 7
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	63 e0       	ldi	r22, 0x03	; 3
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
		break;
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <Led_vidledToggle>:

void Led_vidledToggle(led_ledId_t ledId)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <Led_vidledToggle+0x6>
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3b 83       	std	Y+3, r19	; 0x03
    1376:	2a 83       	std	Y+2, r18	; 0x02
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	9b 81       	ldd	r25, Y+3	; 0x03
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	71 f0       	breq	.+28     	; 0x139e <Led_vidledToggle+0x3e>
    1382:	2a 81       	ldd	r18, Y+2	; 0x02
    1384:	3b 81       	ldd	r19, Y+3	; 0x03
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	71 f0       	breq	.+28     	; 0x13a8 <Led_vidledToggle+0x48>
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	9b 81       	ldd	r25, Y+3	; 0x03
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	71 f4       	brne	.+28     	; 0x13b0 <Led_vidledToggle+0x50>
		{
		case LED0:
			Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	62 e0       	ldi	r22, 0x02	; 2
    1398:	0e 94 31 18 	call	0x3062	; 0x3062 <Dio_vidflipChanel>
    139c:	09 c0       	rjmp	.+18     	; 0x13b0 <Led_vidledToggle+0x50>
			break;

		case LED1:
			Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	67 e0       	ldi	r22, 0x07	; 7
    13a2:	0e 94 31 18 	call	0x3062	; 0x3062 <Dio_vidflipChanel>
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <Led_vidledToggle+0x50>
			break;

		case LED2:
			Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	63 e0       	ldi	r22, 0x03	; 3
    13ac:	0e 94 31 18 	call	0x3062	; 0x3062 <Dio_vidflipChanel>
			break;
		}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <LM35_vidInit>:
 */

#include "LM35.h"

void LM35_vidInit(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	ADC_vidInit();
    13c4:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_vidInit>
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <LM35_u16TempRead>:

u16 LM35_u16TempRead(void)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <LM35_u16TempRead+0x6>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <LM35_u16TempRead+0x8>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <LM35_u16TempRead+0xa>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead =0;
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	ad 83       	std	Y+5, r26	; 0x05
    13ea:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp =0;
    13ec:	1a 82       	std	Y+2, r1	; 0x02
    13ee:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = ADC_f64ADCRead (ADC_CHANNEL1);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <ADC_f64ADCRead>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	ad 83       	std	Y+5, r26	; 0x05
    1400:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead / 10;
    1402:	6b 81       	ldd	r22, Y+3	; 0x03
    1404:	7c 81       	ldd	r23, Y+4	; 0x04
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    142e:	26 96       	adiw	r28, 0x06	; 6
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <Lcd_vidinit>:
#include "Dio.h"
#include <util/delay.h>
#define LCD_MASK (0x0F)

void Lcd_vidinit(void)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	e4 97       	sbiw	r28, 0x34	; 52
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
	//configure
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN1 , DIO_OUTPUT);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN2 , DIO_OUTPUT);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB , DIO_PIN3 , DIO_OUTPUT);
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	63 e0       	ldi	r22, 0x03	; 3
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>

	//configure data pins as output
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	64 e0       	ldi	r22, 0x04	; 4
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN5 , DIO_OUTPUT);
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	65 e0       	ldi	r22, 0x05	; 5
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN6 , DIO_OUTPUT);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	66 e0       	ldi	r22, 0x06	; 6
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA , DIO_PIN7 , DIO_OUTPUT);
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	67 e0       	ldi	r22, 0x07	; 7
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>

	//Always write on LCD
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN2 , DIO_LOW);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e7       	ldi	r26, 0x70	; 112
    14aa:	b1 e4       	ldi	r27, 0x41	; 65
    14ac:	89 ab       	std	Y+49, r24	; 0x31
    14ae:	9a ab       	std	Y+50, r25	; 0x32
    14b0:	ab ab       	std	Y+51, r26	; 0x33
    14b2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	69 a9       	ldd	r22, Y+49	; 0x31
    14b6:	7a a9       	ldd	r23, Y+50	; 0x32
    14b8:	8b a9       	ldd	r24, Y+51	; 0x33
    14ba:	9c a9       	ldd	r25, Y+52	; 0x34
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	55 e4       	ldi	r21, 0x45	; 69
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8d a7       	std	Y+45, r24	; 0x2d
    14ce:	9e a7       	std	Y+46, r25	; 0x2e
    14d0:	af a7       	std	Y+47, r26	; 0x2f
    14d2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    14d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    14d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14da:	98 a9       	ldd	r25, Y+48	; 0x30
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <Lcd_vidinit+0xb6>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c a7       	std	Y+44, r25	; 0x2c
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    14f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    14f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    14fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    14fc:	98 a9       	ldd	r25, Y+48	; 0x30
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	69 a9       	ldd	r22, Y+49	; 0x31
    1510:	7a a9       	ldd	r23, Y+50	; 0x32
    1512:	8b a9       	ldd	r24, Y+51	; 0x33
    1514:	9c a9       	ldd	r25, Y+52	; 0x34
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c a7       	std	Y+44, r25	; 0x2c
    1534:	8b a7       	std	Y+43, r24	; 0x2b
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <Lcd_vidinit+0x116>
    1538:	80 e9       	ldi	r24, 0x90	; 144
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	9a a7       	std	Y+42, r25	; 0x2a
    153e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1540:	89 a5       	ldd	r24, Y+41	; 0x29
    1542:	9a a5       	ldd	r25, Y+42	; 0x2a
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <Lcd_vidinit+0x104>
    1548:	9a a7       	std	Y+42, r25	; 0x2a
    154a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8b a5       	ldd	r24, Y+43	; 0x2b
    154e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9c a7       	std	Y+44, r25	; 0x2c
    1554:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8b a5       	ldd	r24, Y+43	; 0x2b
    1558:	9c a5       	ldd	r25, Y+44	; 0x2c
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <Lcd_vidinit+0xf8>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6d a5       	ldd	r22, Y+45	; 0x2d
    1562:	7e a5       	ldd	r23, Y+46	; 0x2e
    1564:	8f a5       	ldd	r24, Y+47	; 0x2f
    1566:	98 a9       	ldd	r25, Y+48	; 0x30
    1568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9c a7       	std	Y+44, r25	; 0x2c
    1572:	8b a7       	std	Y+43, r24	; 0x2b
    1574:	8b a5       	ldd	r24, Y+43	; 0x2b
    1576:	9c a5       	ldd	r25, Y+44	; 0x2c
    1578:	98 a7       	std	Y+40, r25	; 0x28
    157a:	8f a3       	std	Y+39, r24	; 0x27
    157c:	8f a1       	ldd	r24, Y+39	; 0x27
    157e:	98 a5       	ldd	r25, Y+40	; 0x28
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <Lcd_vidinit+0x140>
    1584:	98 a7       	std	Y+40, r25	; 0x28
    1586:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);
	Lcd_vidCmd(0x03);
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 ea       	ldi	r26, 0xA0	; 160
    1594:	b0 e4       	ldi	r27, 0x40	; 64
    1596:	8b a3       	std	Y+35, r24	; 0x23
    1598:	9c a3       	std	Y+36, r25	; 0x24
    159a:	ad a3       	std	Y+37, r26	; 0x25
    159c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159e:	6b a1       	ldd	r22, Y+35	; 0x23
    15a0:	7c a1       	ldd	r23, Y+36	; 0x24
    15a2:	8d a1       	ldd	r24, Y+37	; 0x25
    15a4:	9e a1       	ldd	r25, Y+38	; 0x26
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	4a e7       	ldi	r20, 0x7A	; 122
    15ac:	55 e4       	ldi	r21, 0x45	; 69
    15ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8f 8f       	std	Y+31, r24	; 0x1f
    15b8:	98 a3       	std	Y+32, r25	; 0x20
    15ba:	a9 a3       	std	Y+33, r26	; 0x21
    15bc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15c0:	78 a1       	ldd	r23, Y+32	; 0x20
    15c2:	89 a1       	ldd	r24, Y+33	; 0x21
    15c4:	9a a1       	ldd	r25, Y+34	; 0x22
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9e 8f       	std	Y+30, r25	; 0x1e
    15dc:	8d 8f       	std	Y+29, r24	; 0x1d
    15de:	3f c0       	rjmp	.+126    	; 0x165e <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    15e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15e2:	78 a1       	ldd	r23, Y+32	; 0x20
    15e4:	89 a1       	ldd	r24, Y+33	; 0x21
    15e6:	9a a1       	ldd	r25, Y+34	; 0x22
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	4f e7       	ldi	r20, 0x7F	; 127
    15ee:	57 e4       	ldi	r21, 0x47	; 71
    15f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	4c f5       	brge	.+82     	; 0x164a <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f8:	6b a1       	ldd	r22, Y+35	; 0x23
    15fa:	7c a1       	ldd	r23, Y+36	; 0x24
    15fc:	8d a1       	ldd	r24, Y+37	; 0x25
    15fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 8f       	std	Y+30, r25	; 0x1e
    161e:	8d 8f       	std	Y+29, r24	; 0x1d
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <Lcd_vidinit+0x200>
    1622:	80 e9       	ldi	r24, 0x90	; 144
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	9c 8f       	std	Y+28, r25	; 0x1c
    1628:	8b 8f       	std	Y+27, r24	; 0x1b
    162a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <Lcd_vidinit+0x1ee>
    1632:	9c 8f       	std	Y+28, r25	; 0x1c
    1634:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1636:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1638:	9e 8d       	ldd	r25, Y+30	; 0x1e
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9e 8f       	std	Y+30, r25	; 0x1e
    163e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1642:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f7       	brne	.-38     	; 0x1622 <Lcd_vidinit+0x1e2>
    1648:	14 c0       	rjmp	.+40     	; 0x1672 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    164c:	78 a1       	ldd	r23, Y+32	; 0x20
    164e:	89 a1       	ldd	r24, Y+33	; 0x21
    1650:	9a a1       	ldd	r25, Y+34	; 0x22
    1652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e 8f       	std	Y+30, r25	; 0x1e
    165c:	8d 8f       	std	Y+29, r24	; 0x1d
    165e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1660:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1662:	9a 8f       	std	Y+26, r25	; 0x1a
    1664:	89 8f       	std	Y+25, r24	; 0x19
    1666:	89 8d       	ldd	r24, Y+25	; 0x19
    1668:	9a 8d       	ldd	r25, Y+26	; 0x1a
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <Lcd_vidinit+0x22a>
    166e:	9a 8f       	std	Y+26, r25	; 0x1a
    1670:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a8 ec       	ldi	r26, 0xC8	; 200
    167e:	b2 e4       	ldi	r27, 0x42	; 66
    1680:	8d 8b       	std	Y+21, r24	; 0x15
    1682:	9e 8b       	std	Y+22, r25	; 0x16
    1684:	af 8b       	std	Y+23, r26	; 0x17
    1686:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	2b ea       	ldi	r18, 0xAB	; 171
    1692:	3a ea       	ldi	r19, 0xAA	; 170
    1694:	4a ea       	ldi	r20, 0xAA	; 170
    1696:	50 e4       	ldi	r21, 0x40	; 64
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	89 8b       	std	Y+17, r24	; 0x11
    16a2:	9a 8b       	std	Y+18, r25	; 0x12
    16a4:	ab 8b       	std	Y+19, r26	; 0x13
    16a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16a8:	69 89       	ldd	r22, Y+17	; 0x11
    16aa:	7a 89       	ldd	r23, Y+18	; 0x12
    16ac:	8b 89       	ldd	r24, Y+19	; 0x13
    16ae:	9c 89       	ldd	r25, Y+20	; 0x14
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	1c f4       	brge	.+6      	; 0x16c6 <Lcd_vidinit+0x286>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	88 8b       	std	Y+16, r24	; 0x10
    16c4:	91 c0       	rjmp	.+290    	; 0x17e8 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    16c6:	69 89       	ldd	r22, Y+17	; 0x11
    16c8:	7a 89       	ldd	r23, Y+18	; 0x12
    16ca:	8b 89       	ldd	r24, Y+19	; 0x13
    16cc:	9c 89       	ldd	r25, Y+20	; 0x14
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	53 e4       	ldi	r21, 0x43	; 67
    16d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <Lcd_vidinit+0x2a0>
    16de:	7b c0       	rjmp	.+246    	; 0x17d6 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    16e0:	6d 89       	ldd	r22, Y+21	; 0x15
    16e2:	7e 89       	ldd	r23, Y+22	; 0x16
    16e4:	8f 89       	ldd	r24, Y+23	; 0x17
    16e6:	98 8d       	ldd	r25, Y+24	; 0x18
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	54 e4       	ldi	r21, 0x44	; 68
    16f0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8c 87       	std	Y+12, r24	; 0x0c
    16fa:	9d 87       	std	Y+13, r25	; 0x0d
    16fc:	ae 87       	std	Y+14, r26	; 0x0e
    16fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	6c 85       	ldd	r22, Y+12	; 0x0c
    1702:	7d 85       	ldd	r23, Y+13	; 0x0d
    1704:	8e 85       	ldd	r24, Y+14	; 0x0e
    1706:	9f 85       	ldd	r25, Y+15	; 0x0f
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	55 e4       	ldi	r21, 0x45	; 69
    1710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	88 87       	std	Y+8, r24	; 0x08
    171a:	99 87       	std	Y+9, r25	; 0x09
    171c:	aa 87       	std	Y+10, r26	; 0x0a
    171e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1720:	68 85       	ldd	r22, Y+8	; 0x08
    1722:	79 85       	ldd	r23, Y+9	; 0x09
    1724:	8a 85       	ldd	r24, Y+10	; 0x0a
    1726:	9b 85       	ldd	r25, Y+11	; 0x0b
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <Lcd_vidinit+0x302>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9f 83       	std	Y+7, r25	; 0x07
    173e:	8e 83       	std	Y+6, r24	; 0x06
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    1742:	68 85       	ldd	r22, Y+8	; 0x08
    1744:	79 85       	ldd	r23, Y+9	; 0x09
    1746:	8a 85       	ldd	r24, Y+10	; 0x0a
    1748:	9b 85       	ldd	r25, Y+11	; 0x0b
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	6c 85       	ldd	r22, Y+12	; 0x0c
    175c:	7d 85       	ldd	r23, Y+13	; 0x0d
    175e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1760:	9f 85       	ldd	r25, Y+15	; 0x0f
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9f 83       	std	Y+7, r25	; 0x07
    1780:	8e 83       	std	Y+6, r24	; 0x06
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <Lcd_vidinit+0x362>
    1784:	80 e9       	ldi	r24, 0x90	; 144
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	9d 83       	std	Y+5, r25	; 0x05
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <Lcd_vidinit+0x350>
    1794:	9d 83       	std	Y+5, r25	; 0x05
    1796:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9f 83       	std	Y+7, r25	; 0x07
    17a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8e 81       	ldd	r24, Y+6	; 0x06
    17a4:	9f 81       	ldd	r25, Y+7	; 0x07
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <Lcd_vidinit+0x344>
    17aa:	24 c0       	rjmp	.+72     	; 0x17f4 <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	68 85       	ldd	r22, Y+8	; 0x08
    17ae:	79 85       	ldd	r23, Y+9	; 0x09
    17b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9f 83       	std	Y+7, r25	; 0x07
    17be:	8e 83       	std	Y+6, r24	; 0x06
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	9f 81       	ldd	r25, Y+7	; 0x07
    17c4:	9b 83       	std	Y+3, r25	; 0x03
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	9b 81       	ldd	r25, Y+3	; 0x03
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <Lcd_vidinit+0x38c>
    17d0:	9b 83       	std	Y+3, r25	; 0x03
    17d2:	8a 83       	std	Y+2, r24	; 0x02
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17d6:	69 89       	ldd	r22, Y+17	; 0x11
    17d8:	7a 89       	ldd	r23, Y+18	; 0x12
    17da:	8b 89       	ldd	r24, Y+19	; 0x13
    17dc:	9c 89       	ldd	r25, Y+20	; 0x14
    17de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	88 8b       	std	Y+16, r24	; 0x10
    17e8:	88 89       	ldd	r24, Y+16	; 0x10
    17ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	8a 95       	dec	r24
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <Lcd_vidinit+0x3ae>
    17f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1800:	88 e2       	ldi	r24, 0x28	; 40
    1802:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
}
    1806:	e4 96       	adiw	r28, 0x34	; 52
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <Lcd_VidenablePulse>:

static void Lcd_VidenablePulse(void) //not in .h and static as user will not use it
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	a6 97       	sbiw	r28, 0x26	; 38
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
	//send enable pulse
		Dio_vidwriteChanel(DIO_PORTB , DIO_PIN3 , DIO_HIGH);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	63 e0       	ldi	r22, 0x03	; 3
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a0 e8       	ldi	r26, 0x80	; 128
    183c:	bf e3       	ldi	r27, 0x3F	; 63
    183e:	8b a3       	std	Y+35, r24	; 0x23
    1840:	9c a3       	std	Y+36, r25	; 0x24
    1842:	ad a3       	std	Y+37, r26	; 0x25
    1844:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1846:	6b a1       	ldd	r22, Y+35	; 0x23
    1848:	7c a1       	ldd	r23, Y+36	; 0x24
    184a:	8d a1       	ldd	r24, Y+37	; 0x25
    184c:	9e a1       	ldd	r25, Y+38	; 0x26
    184e:	2b ea       	ldi	r18, 0xAB	; 171
    1850:	3a ea       	ldi	r19, 0xAA	; 170
    1852:	4a ea       	ldi	r20, 0xAA	; 170
    1854:	50 e4       	ldi	r21, 0x40	; 64
    1856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	8f 8f       	std	Y+31, r24	; 0x1f
    1860:	98 a3       	std	Y+32, r25	; 0x20
    1862:	a9 a3       	std	Y+33, r26	; 0x21
    1864:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1866:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1868:	78 a1       	ldd	r23, Y+32	; 0x20
    186a:	89 a1       	ldd	r24, Y+33	; 0x21
    186c:	9a a1       	ldd	r25, Y+34	; 0x22
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5f e3       	ldi	r21, 0x3F	; 63
    1876:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    187a:	88 23       	and	r24, r24
    187c:	1c f4       	brge	.+6      	; 0x1884 <Lcd_VidenablePulse+0x6c>
		__ticks = 1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	8e 8f       	std	Y+30, r24	; 0x1e
    1882:	91 c0       	rjmp	.+290    	; 0x19a6 <Lcd_VidenablePulse+0x18e>
	else if (__tmp > 255)
    1884:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1886:	78 a1       	ldd	r23, Y+32	; 0x20
    1888:	89 a1       	ldd	r24, Y+33	; 0x21
    188a:	9a a1       	ldd	r25, Y+34	; 0x22
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	53 e4       	ldi	r21, 0x43	; 67
    1894:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	0c f0       	brlt	.+2      	; 0x189e <Lcd_VidenablePulse+0x86>
    189c:	7b c0       	rjmp	.+246    	; 0x1994 <Lcd_VidenablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    189e:	6b a1       	ldd	r22, Y+35	; 0x23
    18a0:	7c a1       	ldd	r23, Y+36	; 0x24
    18a2:	8d a1       	ldd	r24, Y+37	; 0x25
    18a4:	9e a1       	ldd	r25, Y+38	; 0x26
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a e7       	ldi	r20, 0x7A	; 122
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8a 8f       	std	Y+26, r24	; 0x1a
    18b8:	9b 8f       	std	Y+27, r25	; 0x1b
    18ba:	ac 8f       	std	Y+28, r26	; 0x1c
    18bc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18c0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a e7       	ldi	r20, 0x7A	; 122
    18cc:	55 e4       	ldi	r21, 0x45	; 69
    18ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8e 8b       	std	Y+22, r24	; 0x16
    18d8:	9f 8b       	std	Y+23, r25	; 0x17
    18da:	a8 8f       	std	Y+24, r26	; 0x18
    18dc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18de:	6e 89       	ldd	r22, Y+22	; 0x16
    18e0:	7f 89       	ldd	r23, Y+23	; 0x17
    18e2:	88 8d       	ldd	r24, Y+24	; 0x18
    18e4:	99 8d       	ldd	r25, Y+25	; 0x19
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <Lcd_VidenablePulse+0xe8>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9d 8b       	std	Y+21, r25	; 0x15
    18fc:	8c 8b       	std	Y+20, r24	; 0x14
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <Lcd_VidenablePulse+0x166>
	else if (__tmp > 65535)
    1900:	6e 89       	ldd	r22, Y+22	; 0x16
    1902:	7f 89       	ldd	r23, Y+23	; 0x17
    1904:	88 8d       	ldd	r24, Y+24	; 0x18
    1906:	99 8d       	ldd	r25, Y+25	; 0x19
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <Lcd_VidenablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	6a 8d       	ldd	r22, Y+26	; 0x1a
    191a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    191c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    191e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9d 8b       	std	Y+21, r25	; 0x15
    193e:	8c 8b       	std	Y+20, r24	; 0x14
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <Lcd_VidenablePulse+0x148>
    1942:	80 e9       	ldi	r24, 0x90	; 144
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	9b 8b       	std	Y+19, r25	; 0x13
    1948:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    194a:	8a 89       	ldd	r24, Y+18	; 0x12
    194c:	9b 89       	ldd	r25, Y+19	; 0x13
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <Lcd_VidenablePulse+0x136>
    1952:	9b 8b       	std	Y+19, r25	; 0x13
    1954:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8c 89       	ldd	r24, Y+20	; 0x14
    1958:	9d 89       	ldd	r25, Y+21	; 0x15
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9d 8b       	std	Y+21, r25	; 0x15
    195e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8c 89       	ldd	r24, Y+20	; 0x14
    1962:	9d 89       	ldd	r25, Y+21	; 0x15
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <Lcd_VidenablePulse+0x12a>
    1968:	24 c0       	rjmp	.+72     	; 0x19b2 <Lcd_VidenablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6e 89       	ldd	r22, Y+22	; 0x16
    196c:	7f 89       	ldd	r23, Y+23	; 0x17
    196e:	88 8d       	ldd	r24, Y+24	; 0x18
    1970:	99 8d       	ldd	r25, Y+25	; 0x19
    1972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9d 8b       	std	Y+21, r25	; 0x15
    197c:	8c 8b       	std	Y+20, r24	; 0x14
    197e:	8c 89       	ldd	r24, Y+20	; 0x14
    1980:	9d 89       	ldd	r25, Y+21	; 0x15
    1982:	99 8b       	std	Y+17, r25	; 0x11
    1984:	88 8b       	std	Y+16, r24	; 0x10
    1986:	88 89       	ldd	r24, Y+16	; 0x10
    1988:	99 89       	ldd	r25, Y+17	; 0x11
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <Lcd_VidenablePulse+0x172>
    198e:	99 8b       	std	Y+17, r25	; 0x11
    1990:	88 8b       	std	Y+16, r24	; 0x10
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <Lcd_VidenablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1994:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1996:	78 a1       	ldd	r23, Y+32	; 0x20
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8e 8f       	std	Y+30, r24	; 0x1e
    19a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ac:	8a 95       	dec	r24
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <Lcd_VidenablePulse+0x194>
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		Dio_vidwriteChanel(DIO_PORTB , DIO_PIN3 , DIO_LOW);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	63 e0       	ldi	r22, 0x03	; 3
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e4       	ldi	r27, 0x40	; 64
    19c4:	8b 87       	std	Y+11, r24	; 0x0b
    19c6:	9c 87       	std	Y+12, r25	; 0x0c
    19c8:	ad 87       	std	Y+13, r26	; 0x0d
    19ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	55 e4       	ldi	r21, 0x45	; 69
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08
    19e8:	a9 87       	std	Y+9, r26	; 0x09
    19ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <Lcd_VidenablePulse+0x1f6>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <Lcd_VidenablePulse+0x274>
	else if (__tmp > 65535)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <Lcd_VidenablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <Lcd_VidenablePulse+0x256>
    1a50:	80 e9       	ldi	r24, 0x90	; 144
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <Lcd_VidenablePulse+0x244>
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <Lcd_VidenablePulse+0x238>
    1a76:	14 c0       	rjmp	.+40     	; 0x1aa0 <Lcd_VidenablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <Lcd_VidenablePulse+0x280>
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    1aa0:	a6 96       	adiw	r28, 0x26	; 38
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <Lcd_vidDisplayChar>:

void Lcd_vidDisplayChar(u8 chr)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <Lcd_vidDisplayChar+0x6>
    1ab8:	0f 92       	push	r0
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	8b 83       	std	Y+3, r24	; 0x03
	//    MSB  LSB
	//0b 1101 1001
	u8 loc_MSB = chr & 0xF0;  //0xF0 = ~LCD_MASK  //1101 0000
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	80 7f       	andi	r24, 0xF0	; 240
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = chr << 4;						  //1001 0000
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	82 95       	swap	r24
    1aca:	80 7f       	andi	r24, 0xF0	; 240
    1acc:	89 83       	std	Y+1, r24	; 0x01

	// RS->1
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_HIGH);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>

	// Write data to MSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_MSB , LCD_MASK);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	6a 81       	ldd	r22, Y+2	; 0x02
    1adc:	4f e0       	ldi	r20, 0x0F	; 15
    1ade:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1ae2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Lcd_VidenablePulse>

	// Write data to LSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_LSB , LCD_MASK);
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	69 81       	ldd	r22, Y+1	; 0x01
    1aea:	4f e0       	ldi	r20, 0x0F	; 15
    1aec:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1af0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Lcd_VidenablePulse>

}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <Lcd_vidDisplayStr>:

void Lcd_vidDisplayStr(u8 * str)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <Lcd_vidDisplayStr+0x6>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0a c0       	rjmp	.+20     	; 0x1b24 <Lcd_vidDisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	80 81       	ld	r24, Z
    1b16:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <Lcd_vidDisplayChar>
		str++;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01

}

void Lcd_vidDisplayStr(u8 * str)
{
	while (*str != '\0')
    1b24:	e9 81       	ldd	r30, Y+1	; 0x01
    1b26:	fa 81       	ldd	r31, Y+2	; 0x02
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	89 f7       	brne	.-30     	; 0x1b10 <Lcd_vidDisplayStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <LCD_vidDisplayInt>:

void LCD_vidDisplayInt(u32 num)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	29 97       	sbiw	r28, 0x09	; 9
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	6e 83       	std	Y+6, r22	; 0x06
    1b4e:	7f 83       	std	Y+7, r23	; 0x07
    1b50:	88 87       	std	Y+8, r24	; 0x08
    1b52:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer [5];
	sprintf(buffer , "%d" , num);
    1b54:	8d b7       	in	r24, 0x3d	; 61
    1b56:	9e b7       	in	r25, 0x3e	; 62
    1b58:	08 97       	sbiw	r24, 0x08	; 8
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	9e bf       	out	0x3e, r25	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	8d bf       	out	0x3d, r24	; 61
    1b64:	ed b7       	in	r30, 0x3d	; 61
    1b66:	fe b7       	in	r31, 0x3e	; 62
    1b68:	31 96       	adiw	r30, 0x01	; 1
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	80 e6       	ldi	r24, 0x60	; 96
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	93 83       	std	Z+3, r25	; 0x03
    1b78:	82 83       	std	Z+2, r24	; 0x02
    1b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b7e:	a8 85       	ldd	r26, Y+8	; 0x08
    1b80:	b9 85       	ldd	r27, Y+9	; 0x09
    1b82:	84 83       	std	Z+4, r24	; 0x04
    1b84:	95 83       	std	Z+5, r25	; 0x05
    1b86:	a6 83       	std	Z+6, r26	; 0x06
    1b88:	b7 83       	std	Z+7, r27	; 0x07
    1b8a:	0e 94 42 1a 	call	0x3484	; 0x3484 <sprintf>
    1b8e:	8d b7       	in	r24, 0x3d	; 61
    1b90:	9e b7       	in	r25, 0x3e	; 62
    1b92:	08 96       	adiw	r24, 0x08	; 8
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	9e bf       	out	0x3e, r25	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplayStr(buffer);
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <Lcd_vidDisplayStr>
}
    1ba6:	29 96       	adiw	r28, 0x09	; 9
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_vidDisplayFloat>:

void LCD_vidDisplayFloat(f64 num)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <LCD_vidDisplayFloat+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <LCD_vidDisplayFloat+0x8>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	69 83       	std	Y+1, r22	; 0x01
    1bc6:	7a 83       	std	Y+2, r23	; 0x02
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
    1bca:	9c 83       	std	Y+4, r25	; 0x04

}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <Lcd_vidCmd>:

void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <Lcd_vidCmd+0x6>
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8b 83       	std	Y+3, r24	; 0x03
	//    MSB  LSB
	//0b 1101 1001
	u8 loc_MSB = cmd & 0xF0;  //0xF0 = ~LCD_MASK  //1101 0000
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	80 7f       	andi	r24, 0xF0	; 240
    1bec:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd << 4;						  //1001 0000
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	82 95       	swap	r24
    1bf2:	80 7f       	andi	r24, 0xF0	; 240
    1bf4:	89 83       	std	Y+1, r24	; 0x01

	// RS->0
	Dio_vidwriteChanel(DIO_PORTB , DIO_PIN1 , DIO_LOW);
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>

	// Write data to MSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_MSB , LCD_MASK);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	6a 81       	ldd	r22, Y+2	; 0x02
    1c04:	4f e0       	ldi	r20, 0x0F	; 15
    1c06:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1c0a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Lcd_VidenablePulse>

	// Write data to LSB
	Dio_vidWriteChanelGroup(DIO_PORTA , loc_LSB , LCD_MASK);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	69 81       	ldd	r22, Y+1	; 0x01
    1c12:	4f e0       	ldi	r20, 0x0F	; 15
    1c14:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>

	//send enable pulse
	Lcd_VidenablePulse();
    1c18:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Lcd_VidenablePulse>
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_vidRowColumn>:

void LCD_vidRowColumn(u8 row , u8 col)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <LCD_vidRowColumn+0x6>
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <LCD_vidRowColumn+0x8>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	3c 83       	std	Y+4, r19	; 0x04
    1c40:	2b 83       	std	Y+3, r18	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	31 f0       	breq	.+12     	; 0x1c56 <LCD_vidRowColumn+0x2e>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	21 30       	cpi	r18, 0x01	; 1
    1c50:	31 05       	cpc	r19, r1
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <LCD_vidRowColumn+0x38>
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <LCD_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	80 58       	subi	r24, 0x80	; 128
    1c5a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <LCD_vidRowColumn+0x40>
		break;
	case 1:
		Lcd_vidCmd(0xC0 + col);
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 54       	subi	r24, 0x40	; 64
    1c64:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Lcd_vidCmd>
		break;
	}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <Keypad_vidInit>:
 */
#include "Keypad.h"
#include "Keypad_Types.h"

void Keypad_vidInit (void)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	// configure rows pins as input
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN0 , DIO_INPUT);
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN1 , DIO_INPUT);
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN2 , DIO_INPUT);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN3 , DIO_INPUT);
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	63 e0       	ldi	r22, 0x03	; 3
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>

	//configure Columns pins as outputs
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN4 , DIO_OUTPUT);
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	64 e0       	ldi	r22, 0x04	; 4
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN5 , DIO_OUTPUT);
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	65 e0       	ldi	r22, 0x05	; 5
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN6 , DIO_OUTPUT);
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	66 e0       	ldi	r22, 0x06	; 6
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC ,DIO_PIN7 , DIO_OUTPUT);
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	67 e0       	ldi	r22, 0x07	; 7
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>

	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN0);
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 ae 18 	call	0x315c	; 0x315c <Dio_vidPullUpEnalple>
	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN1);
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	0e 94 ae 18 	call	0x315c	; 0x315c <Dio_vidPullUpEnalple>
	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN2);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	62 e0       	ldi	r22, 0x02	; 2
    1ce2:	0e 94 ae 18 	call	0x315c	; 0x315c <Dio_vidPullUpEnalple>
	Dio_vidPullUpEnalple(DIO_PORTC , DIO_PIN3);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	0e 94 ae 18 	call	0x315c	; 0x315c <Dio_vidPullUpEnalple>

	//initialize columns as zero
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN4 , DIO_LOW);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN5 , DIO_LOW);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	65 e0       	ldi	r22, 0x05	; 5
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN6 , DIO_LOW);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>
	Dio_vidWriteChanelGroup(DIO_PORTC , DIO_PIN7 , DIO_LOW);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	67 e0       	ldi	r22, 0x07	; 7
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Dio_vidWriteChanelGroup>

}
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	if (
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1d2e:	88 23       	and	r24, r24
    1d30:	91 f0       	breq	.+36     	; 0x1d56 <Keypad_IsPressed+0x3a>
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1d3a:	88 23       	and	r24, r24
    1d3c:	61 f0       	breq	.+24     	; 0x1d56 <Keypad_IsPressed+0x3a>
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	62 e0       	ldi	r22, 0x02	; 2
    1d42:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1d46:	88 23       	and	r24, r24
    1d48:	31 f0       	breq	.+12     	; 0x1d56 <Keypad_IsPressed+0x3a>
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	63 e0       	ldi	r22, 0x03	; 3
    1d4e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1d52:	88 23       	and	r24, r24
    1d54:	19 f4       	brne	.+6      	; 0x1d5c <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC , DIO_PIN1) == DIO_LOW  ||
			Dio_udtreadChanel(DIO_PORTC , DIO_PIN2) == DIO_LOW  ||
			Dio_udtreadChanel(DIO_PORTC , DIO_PIN3) == DIO_LOW
		)
	{
		return TRUE;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1d5c:	19 82       	std	Y+1, r1	; 0x01
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <Keypad_GetRow>:

static KP_row_t Keypad_GetRow(void)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <Keypad_GetRow+0x6>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
	KP_row_t loc_Button = KP_NOROW;
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	8a 83       	std	Y+2, r24	; 0x02
	if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1d7e:	88 23       	and	r24, r24
    1d80:	11 f4       	brne	.+4      	; 0x1d86 <Keypad_GetRow+0x1e>
	{
		loc_Button = KP_ROW0;
    1d82:	1a 82       	std	Y+2, r1	; 0x02
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f4       	brne	.+6      	; 0x1d98 <Keypad_GetRow+0x30>
	{
		loc_Button = KP_ROW1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1da0:	88 23       	and	r24, r24
    1da2:	19 f4       	brne	.+6      	; 0x1daa <Keypad_GetRow+0x42>
	{
		loc_Button = KP_ROW2;
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    1da8:	0b c0       	rjmp	.+22     	; 0x1dc0 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC , DIO_PIN0) == DIO_LOW)
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    1db2:	88 23       	and	r24, r24
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <Keypad_GetRow+0x54>
	{
		loc_Button = KP_ROW3;
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	8a 83       	std	Y+2, r24	; 0x02
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <Keypad_GetRow+0x58>
	}
	else
	{
		KP_row_t loc_Button = KP_NOROW;
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	89 83       	std	Y+1, r24	; 0x01
	}

	return loc_Button;
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <Keypad_GetColumn>:

static KP_column_t Keypad_GetColumn(KP_row_t current_row)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <Keypad_GetColumn+0x6>
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
	KP_column_t loc_ButtonCol = KP_NOCOLUMN;
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	8a 83       	std	Y+2, r24	; 0x02

	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_LOW);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_HIGH);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	41 e0       	ldi	r20, 0x01	; 1
    1dee:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	62 e0       	ldi	r22, 0x02	; 2
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	63 e0       	ldi	r22, 0x03	; 3
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1e06:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <Keypad_GetRow>
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	98 17       	cp	r25, r24
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <Keypad_GetColumn+0x4a>
	{
		loc_ButtonCol = KP_COL0;
    1e12:	1a 82       	std	Y+2, r1	; 0x02
    1e14:	59 c0       	rjmp	.+178    	; 0x1ec8 <Keypad_GetColumn+0xfc>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_HIGH);
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_LOW);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    1e3e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <Keypad_GetRow>
    1e42:	98 2f       	mov	r25, r24
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	98 17       	cp	r25, r24
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <Keypad_GetColumn+0x84>
		{
			loc_ButtonCol = KP_COL1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
    1e4e:	3c c0       	rjmp	.+120    	; 0x1ec8 <Keypad_GetColumn+0xfc>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_HIGH);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_HIGH);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_LOW);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	63 e0       	ldi	r22, 0x03	; 3
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    1e78:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <Keypad_GetRow>
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	98 17       	cp	r25, r24
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <Keypad_GetColumn+0xbe>
			{
				loc_ButtonCol = KP_COL2;
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	8a 83       	std	Y+2, r24	; 0x02
    1e88:	1f c0       	rjmp	.+62     	; 0x1ec8 <Keypad_GetColumn+0xfc>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN0 , DIO_HIGH);
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN1 , DIO_HIGH);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC , DIO_PIN3 , DIO_LOW);
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    1eb2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <Keypad_GetRow>
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	98 17       	cp	r25, r24
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <Keypad_GetColumn+0xf8>
				{
					loc_ButtonCol = KP_COL3;
    1ebe:	83 e0       	ldi	r24, 0x03	; 3
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <Keypad_GetColumn+0xfc>
				}
				else
				{
					KP_column_t loc_ButtonCol = KP_NOCOLUMN;
    1ec4:	8f ef       	ldi	r24, 0xFF	; 255
    1ec6:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <Keypad_u8GetKeypad>:

u8 Keypad_u8GetKeypad (void)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <Keypad_u8GetKeypad+0x6>
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_Key = 0xFF;
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
	KP_row_t loc_Row = KP_NOROW;
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
	KP_row_t loc_Col = KP_NOCOLUMN;
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit(); // to return the keypad to original case after first press
    1eee:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <Keypad_vidInit>

	// check if the keypad is pressed or not
	if (Keypad_IsPressed() == TRUE)
    1ef2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <Keypad_IsPressed>
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	f1 f4       	brne	.+60     	; 0x1f36 <Keypad_u8GetKeypad+0x60>
	{
		//get pressed key row
		loc_Row = Keypad_GetRow();
    1efa:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <Keypad_GetRow>
    1efe:	8a 83       	std	Y+2, r24	; 0x02

		//get pressed key column
		loc_Col = Keypad_GetColumn(loc_Row);
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Keypad_GetColumn>
    1f06:	89 83       	std	Y+1, r24	; 0x01

		// loc_key = keypad_layout [row] [column]
		Loc_Key = Keypad_layout [loc_Row][loc_Col];
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	55 27       	eor	r21, r21
    1f0e:	47 fd       	sbrc	r20, 7
    1f10:	50 95       	com	r21
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	28 2f       	mov	r18, r24
    1f16:	33 27       	eor	r19, r19
    1f18:	27 fd       	sbrc	r18, 7
    1f1a:	30 95       	com	r19
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	82 0f       	add	r24, r18
    1f28:	93 1f       	adc	r25, r19
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	e5 59       	subi	r30, 0x95	; 149
    1f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f30:	80 81       	ld	r24, Z
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <Keypad_u8GetKeypad+0x64>
	}
	else
	{
		//do nothing
		Loc_Key = 0xFF;
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_Key;
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <Eeprom24C16_Init>:
#include <util/delay.h>
#include "EEPROM24C16.h"
#include "Lcd.h"

void Eeprom24C16_Init(void)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    1f50:	0e 94 4a 13 	call	0x2694	; 0x2694 <I2C_MasterInit>
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <Eeprom24C16_WriteByte>:

/*	addr = 0 to 2047	*/
void Eeprom24C16_WriteByte(u16 addr, u8 data)

{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	63 97       	sbiw	r28, 0x13	; 19
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	9a 8b       	std	Y+18, r25	; 0x12
    1f70:	89 8b       	std	Y+17, r24	; 0x11
    1f72:	6b 8b       	std	Y+19, r22	; 0x13
	u8 loc_pageNo = (addr/256);
    1f74:	89 89       	ldd	r24, Y+17	; 0x11
    1f76:	9a 89       	ldd	r25, Y+18	; 0x12
    1f78:	89 2f       	mov	r24, r25
    1f7a:	99 27       	eor	r25, r25
    1f7c:	88 8b       	std	Y+16, r24	; 0x10
	u8 loc_byteNo = (addr%256);
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	8f 87       	std	Y+15, r24	; 0x0f

	I2C_StartCondition();
    1f82:	0e 94 81 13 	call	0x2702	; 0x2702 <I2C_StartCondition>
<<  0100 0010	  -> 1010 0010
*/

	/*	1010 0page	-> 0xA0 | page number   001 	*/

	I2C_Send_SlaveAddressWriteOperation( 0x50 |loc_pageNo);
    1f86:	88 89       	ldd	r24, Y+16	; 0x10
    1f88:	80 65       	ori	r24, 0x50	; 80
    1f8a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    1f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f90:	0e 94 cd 13 	call	0x279a	; 0x279a <I2C_WriteByte>
	I2C_WriteByte(data);
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	0e 94 cd 13 	call	0x279a	; 0x279a <I2C_WriteByte>
	I2C_StopCondition();
    1f9a:	0e 94 ba 13 	call	0x2774	; 0x2774 <I2C_StopCondition>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a0 e2       	ldi	r26, 0x20	; 32
    1fa4:	b1 e4       	ldi	r27, 0x41	; 65
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
    1faa:	ad 87       	std	Y+13, r26	; 0x0d
    1fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a e7       	ldi	r20, 0x7A	; 122
    1fbc:	55 e4       	ldi	r21, 0x45	; 69
    1fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8f 83       	std	Y+7, r24	; 0x07
    1fc8:	98 87       	std	Y+8, r25	; 0x08
    1fca:	a9 87       	std	Y+9, r26	; 0x09
    1fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <Eeprom24C16_WriteByte+0x96>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <Eeprom24C16_WriteByte+0x114>
	else if (__tmp > 65535)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <Eeprom24C16_WriteByte+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <Eeprom24C16_WriteByte+0xf6>
    2032:	80 e9       	ldi	r24, 0x90	; 144
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <Eeprom24C16_WriteByte+0xe4>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <Eeprom24C16_WriteByte+0xd8>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <Eeprom24C16_WriteByte+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <Eeprom24C16_WriteByte+0x120>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2082:	63 96       	adiw	r28, 0x13	; 19
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <Eeprom24C16_ReadByte>:

/*	addr = 0 to 2047	*/
u8 Eeprom24C16_ReadByte(u16 addr)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <Eeprom24C16_ReadByte+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <Eeprom24C16_ReadByte+0x8>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	9d 83       	std	Y+5, r25	; 0x05
    20a4:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_pageNo = (addr/256);
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	89 2f       	mov	r24, r25
    20ac:	99 27       	eor	r25, r25
    20ae:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_byteNo = (addr%256);
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_dataRead=0;
    20b4:	19 82       	std	Y+1, r1	; 0x01
	I2C_StartCondition();
    20b6:	0e 94 81 13 	call	0x2702	; 0x2702 <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation( 0x50 | loc_pageNo);
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	80 65       	ori	r24, 0x50	; 80
    20be:	0e 94 e7 13 	call	0x27ce	; 0x27ce <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	0e 94 cd 13 	call	0x279a	; 0x279a <I2C_WriteByte>
	I2C_RepeatedStartCondition();
    20c8:	0e 94 9c 13 	call	0x2738	; 0x2738 <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation( 0x50 | loc_pageNo);
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	80 65       	ori	r24, 0x50	; 80
    20d0:	0e 94 04 14 	call	0x2808	; 0x2808 <I2C_Send_SlaveAddressReadOperation>
	loc_dataRead = I2C_ReadByte();
    20d4:	0e 94 25 14 	call	0x284a	; 0x284a <I2C_ReadByte>
    20d8:	89 83       	std	Y+1, r24	; 0x01
	I2C_StopCondition();
    20da:	0e 94 ba 13 	call	0x2774	; 0x2774 <I2C_StopCondition>
	return loc_dataRead;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <Dc_Motor_vidInit>:

#include "DC_Motor.h"
#include "util/delay.h"

void Dc_Motor_vidInit(void)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Motor Control Pins as Outputs	*/

	/*	Make Sure Motor is Stop	*/

}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <Dc_Motor_vidStart>:
void Dc_Motor_vidStart(motor_dir_t dir)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	89 83       	std	Y+1, r24	; 0x01

	}

	/*	Set EN1 Pin	*/

}
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <Dc_Motor_vidStop>:
void Dc_Motor_vidStop(void)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	2e 97       	sbiw	r28, 0x0e	; 14
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e8       	ldi	r25, 0x80	; 128
    212a:	ab e3       	ldi	r26, 0x3B	; 59
    212c:	b5 e4       	ldi	r27, 0x45	; 69
    212e:	8b 87       	std	Y+11, r24	; 0x0b
    2130:	9c 87       	std	Y+12, r25	; 0x0c
    2132:	ad 87       	std	Y+13, r26	; 0x0d
    2134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	55 e4       	ldi	r21, 0x45	; 69
    2146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8f 83       	std	Y+7, r24	; 0x07
    2150:	98 87       	std	Y+8, r25	; 0x08
    2152:	a9 87       	std	Y+9, r26	; 0x09
    2154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	6b 85       	ldd	r22, Y+11	; 0x0b
    2192:	7c 85       	ldd	r23, Y+12	; 0x0c
    2194:	8d 85       	ldd	r24, Y+13	; 0x0d
    2196:	9e 85       	ldd	r25, Y+14	; 0x0e
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <Dc_Motor_vidStop+0xc6>
    21ba:	80 e9       	ldi	r24, 0x90	; 144
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <Dc_Motor_vidStop+0xb4>
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <Dc_Motor_vidStop+0xa8>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <Dc_Motor_vidStop+0xf0>
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear EN1 Pin	*/

	/*	Wait Till Motor Stop	*/
	_delay_ms(3000);
}
    220a:	2e 96       	adiw	r28, 0x0e	; 14
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Buzzer_vidinit>:

#include "Dio.h"
#include "Buzzer.h"

void Buzzer_vidinit(void)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN3 ,DIO_OUTPUT);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	63 e0       	ldi	r22, 0x03	; 3
    2228:	41 e0       	ldi	r20, 0x01	; 1
    222a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
}
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <Buzzer_vidBuzzerOn>:

void Buzzer_vidBuzzerOn(void)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	63 e0       	ldi	r22, 0x03	; 3
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <Buzzer_vidBuzzerOff>:

void Buzzer_vidBuzzerOff(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	63 e0       	ldi	r22, 0x03	; 3
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	66 e0       	ldi	r22, 0x06	; 6
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	62 e0       	ldi	r22, 0x02	; 2
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <Button_udtbuttonStatus+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <Button_udtbuttonStatus+0x8>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    229e:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	3c 83       	std	Y+4, r19	; 0x04
    22a8:	2b 83       	std	Y+3, r18	; 0x03
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	91 05       	cpc	r25, r1
    22b2:	a1 f0       	breq	.+40     	; 0x22dc <Button_udtbuttonStatus+0x4c>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	d1 f0       	breq	.+52     	; 0x22f2 <Button_udtbuttonStatus+0x62>
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	01 f5       	brne	.+64     	; 0x2306 <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	19 f4       	brne	.+6      	; 0x22d8 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	17 c0       	rjmp	.+46     	; 0x2306 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    22d8:	19 82       	std	Y+1, r1	; 0x01
    22da:	15 c0       	rjmp	.+42     	; 0x2306 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	66 e0       	ldi	r22, 0x06	; 6
    22e0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	19 f4       	brne	.+6      	; 0x22ee <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	0c c0       	rjmp	.+24     	; 0x2306 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    22ee:	19 82       	std	Y+1, r1	; 0x01
    22f0:	0a c0       	rjmp	.+20     	; 0x2306 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	62 e0       	ldi	r22, 0x02	; 2
    22f6:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Dio_udtreadChanel>
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	19 f4       	brne	.+6      	; 0x2304 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	01 c0       	rjmp	.+2      	; 0x2306 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2304:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <USART_Init>:

#include "UART.h"


void USART_Init(u32 baud)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	28 97       	sbiw	r28, 0x08	; 8
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	6d 83       	std	Y+5, r22	; 0x05
    232c:	7e 83       	std	Y+6, r23	; 0x06
    232e:	8f 83       	std	Y+7, r24	; 0x07
    2330:	98 87       	std	Y+8, r25	; 0x08
	/*	Calculate UBRR Value	*/
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	af 81       	ldd	r26, Y+7	; 0x07
    2338:	b8 85       	ldd	r27, Y+8	; 0x08
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	aa 1f       	adc	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	aa 1f       	adc	r26, r26
    2348:	bb 1f       	adc	r27, r27
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	aa 1f       	adc	r26, r26
    2350:	bb 1f       	adc	r27, r27
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	aa 1f       	adc	r26, r26
    2358:	bb 1f       	adc	r27, r27
    235a:	9c 01       	movw	r18, r24
    235c:	ad 01       	movw	r20, r26
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	94 e2       	ldi	r25, 0x24	; 36
    2362:	a4 ef       	ldi	r26, 0xF4	; 244
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodsi4>
    236e:	da 01       	movw	r26, r20
    2370:	c9 01       	movw	r24, r18
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	a1 09       	sbc	r26, r1
    2376:	b1 09       	sbc	r27, r1
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	ab 83       	std	Y+3, r26	; 0x03
    237e:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    2380:	e0 e4       	ldi	r30, 0x40	; 64
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	ab 81       	ldd	r26, Y+3	; 0x03
    238a:	bc 81       	ldd	r27, Y+4	; 0x04
    238c:	89 2f       	mov	r24, r25
    238e:	9a 2f       	mov	r25, r26
    2390:	ab 2f       	mov	r26, r27
    2392:	bb 27       	eor	r27, r27
    2394:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    2396:	e9 e2       	ldi	r30, 0x29	; 41
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    239e:	ea e2       	ldi	r30, 0x2A	; 42
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	88 e1       	ldi	r24, 0x18	; 24
    23a4:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    23a6:	e0 e4       	ldi	r30, 0x40	; 64
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8e e8       	ldi	r24, 0x8E	; 142
    23ac:	80 83       	st	Z, r24
}
    23ae:	28 96       	adiw	r28, 0x08	; 8
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    23cc:	eb e2       	ldi	r30, 0x2B	; 43
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	82 95       	swap	r24
    23d4:	86 95       	lsr	r24
    23d6:	87 70       	andi	r24, 0x07	; 7
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	81 70       	andi	r24, 0x01	; 1
    23de:	90 70       	andi	r25, 0x00	; 0
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	a1 f3       	breq	.-24     	; 0x23cc <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    23e4:	ec e2       	ldi	r30, 0x2C	; 44
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	80 83       	st	Z, r24
}
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <USART_Receive>:

u8 USART_Receive(void)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    23fc:	eb e2       	ldi	r30, 0x2B	; 43
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	88 23       	and	r24, r24
    2404:	dc f7       	brge	.-10     	; 0x23fc <USART_Receive+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    2406:	ec e2       	ldi	r30, 0x2C	; 44
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
}
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <USART_Receive_Blocking>:



u8 USART_Receive_Blocking(void)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    241a:	eb e2       	ldi	r30, 0x2B	; 43
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	88 23       	and	r24, r24
    2422:	dc f7       	brge	.-10     	; 0x241a <USART_Receive_Blocking+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    2424:	ec e2       	ldi	r30, 0x2C	; 44
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
}
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <USART_Receive_NonBlocking>:
u8 USART_Receive_NonBlocking(void)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	0f 92       	push	r0
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    243a:	eb e2       	ldi	r30, 0x2B	; 43
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	88 1f       	adc	r24, r24
    2442:	88 27       	eor	r24, r24
    2444:	88 1f       	adc	r24, r24
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	29 f4       	brne	.+10     	; 0x2454 <USART_Receive_NonBlocking+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    244a:	ec e2       	ldi	r30, 0x2C	; 44
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <USART_Receive_NonBlocking+0x26>
	}
	else
	{
		return 0;
    2454:	19 82       	std	Y+1, r1	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <USART_TransmitStr>:
void USART_TransmitStr(u8 *str)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <USART_TransmitStr+0x6>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	0a c0       	rjmp	.+20     	; 0x2484 <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    2470:	e9 81       	ldd	r30, Y+1	; 0x01
    2472:	fa 81       	ldd	r31, Y+2	; 0x02
    2474:	80 81       	ld	r24, Z
    2476:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <USART_TransmitChar>
		str++;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
	}

}
void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    2484:	e9 81       	ldd	r30, Y+1	; 0x01
    2486:	fa 81       	ldd	r31, Y+2	; 0x02
    2488:	80 81       	ld	r24, Z
    248a:	88 23       	and	r24, r24
    248c:	89 f7       	brne	.-30     	; 0x2470 <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <USART_Receive_InterruptEnable>:
void USART_Receive_InterruptEnable(void)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXCIE_BIT);
    24a0:	aa e2       	ldi	r26, 0x2A	; 42
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ea e2       	ldi	r30, 0x2A	; 42
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	80 68       	ori	r24, 0x80	; 128
    24ac:	8c 93       	st	X, r24
}
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <Timer0_vidInit>:
 *      Author: faster
 */
#include "Timer0.h"

void Timer0_vidInit(void)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62

}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <Timer0_vidSetPreload>:

void Timer0_vidSetPreload(u8 preload)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	89 83       	std	Y+1, r24	; 0x01

}
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <Timer0_vidTimerStart>:

void Timer0_vidTimerStart(timer0_clk_t clk)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	0f 92       	push	r0
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	89 83       	std	Y+1, r24	; 0x01

}
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <Timer0_vidTimerStop>:

void Timer0_vidTimerStop(void)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62

}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <Timer0_vidEnableOVInterrupt>:

void Timer0_vidEnableOVInterrupt(void)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62

}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <Timer0_vidDisableOVInterrupt>:
void Timer0_vidDisableOVInterrupt(void)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62

}
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <Spi_vidMasterInit>:
 */

#include "Spi.h"

void Spi_vidMasterInit(void)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	67 e0       	ldi	r22, 0x07	; 7
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_INPUT);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	66 e0       	ldi	r22, 0x06	; 6
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	64 e0       	ldi	r22, 0x04	; 4
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Dio_vidwriteChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    254e:	ad e2       	ldi	r26, 0x2D	; 45
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ed e2       	ldi	r30, 0x2D	; 45
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	80 64       	ori	r24, 0x40	; 64
    255a:	8c 93       	st	X, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    255c:	ad e2       	ldi	r26, 0x2D	; 45
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ed e2       	ldi	r30, 0x2D	; 45
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	80 61       	ori	r24, 0x10	; 16
    2568:	8c 93       	st	X, r24
	/*	set SCK frequency by F_CPU/16	*/
	/*	Set SPI Speed	1MHZ*/
	SPI_SPCR_REG |= SPI_SCK_FREQ_FCPU_DIV_16;
    256a:	ad e2       	ldi	r26, 0x2D	; 45
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ed e2       	ldi	r30, 0x2D	; 45
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	81 60       	ori	r24, 0x01	; 1
    2576:	8c 93       	st	X, r24
}
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <Spi_vidSlaveInit>:

void Spi_vidSlaveInit(void)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_INPUT);
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	65 e0       	ldi	r22, 0x05	; 5
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	64 e0       	ldi	r22, 0x04	; 4
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_INPUT);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	67 e0       	ldi	r22, 0x07	; 7
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	66 e0       	ldi	r22, 0x06	; 6
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <Dio_vidconfigChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    25ae:	ad e2       	ldi	r26, 0x2D	; 45
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	ed e2       	ldi	r30, 0x2D	; 45
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 64       	ori	r24, 0x40	; 64
    25ba:	8c 93       	st	X, r24
	/*	enable SPI Module in Slave mode	*/
	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    25bc:	ad e2       	ldi	r26, 0x2D	; 45
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ed e2       	ldi	r30, 0x2D	; 45
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	8f 7e       	andi	r24, 0xEF	; 239
    25c8:	8c 93       	st	X, r24
}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <Spi_MasterWrite+0x6>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    25dc:	ef e2       	ldi	r30, 0x2F	; 47
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    25e4:	ee e2       	ldi	r30, 0x2E	; 46
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 23       	and	r24, r24
    25ec:	dc f7       	brge	.-10     	; 0x25e4 <Spi_MasterWrite+0x14>
	{
		;
	}
	loc_flush_byte = SPI_SPDR_REG;
    25ee:	ef e2       	ldi	r30, 0x2F	; 47
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	89 83       	std	Y+1, r24	; 0x01
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <Spi_u8MasterRead>:

u8 Spi_u8MasterRead(void)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
    260a:	8f ef       	ldi	r24, 0xFF	; 255
    260c:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    260e:	ef e2       	ldi	r30, 0x2F	; 47
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2616:	ee e2       	ldi	r30, 0x2E	; 46
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	dc f7       	brge	.-10     	; 0x2616 <Spi_u8MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    2620:	ef e2       	ldi	r30, 0x2F	; 47
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
}
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <Spi_u8MasterTranseve>:

u8 Spi_u8MasterTranseve(u8 data)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    263a:	ef e2       	ldi	r30, 0x2F	; 47
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2642:	ee e2       	ldi	r30, 0x2E	; 46
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	88 23       	and	r24, r24
    264a:	dc f7       	brge	.-10     	; 0x2642 <Spi_u8MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    264c:	ef e2       	ldi	r30, 0x2F	; 47
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
}
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <Spi_u8SlaveRead>:

u8 Spi_u8SlaveRead(void)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2662:	ee e2       	ldi	r30, 0x2E	; 46
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	88 23       	and	r24, r24
    266a:	dc f7       	brge	.-10     	; 0x2662 <Spi_u8SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    266c:	ef e2       	ldi	r30, 0x2F	; 47
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
}
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <Spi_vidSlaveWrite>:

void Spi_vidSlaveWrite(u8 data)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	0f 92       	push	r0
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
    2684:	ef e2       	ldi	r30, 0x2F	; 47
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	80 83       	st	Z, r24
}
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <I2C_MasterInit>:
 */

#include "I2C.h"

void I2C_MasterInit(void)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    269c:	e0 e2       	ldi	r30, 0x20	; 32
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	8c e0       	ldi	r24, 0x0C	; 12
    26a2:	80 83       	st	Z, r24
    /* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    26a4:	a6 e5       	ldi	r26, 0x56	; 86
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e6 e5       	ldi	r30, 0x56	; 86
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	84 64       	ori	r24, 0x44	; 68
    26b0:	8c 93       	st	X, r24
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <I2C_SlaveInit>:

void I2C_SlaveInit(u8 addr)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    26c4:	a2 e2       	ldi	r26, 0x22	; 34
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e2 e2       	ldi	r30, 0x22	; 34
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	81 60       	ori	r24, 0x01	; 1
    26d0:	8c 93       	st	X, r24
    /* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    26d2:	a2 e2       	ldi	r26, 0x22	; 34
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e2 e2       	ldi	r30, 0x22	; 34
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	28 2f       	mov	r18, r24
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	88 0f       	add	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	82 2b       	or	r24, r18
    26ea:	8c 93       	st	X, r24
    /* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    26ec:	a6 e5       	ldi	r26, 0x56	; 86
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e6 e5       	ldi	r30, 0x56	; 86
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	84 64       	ori	r24, 0x44	; 68
    26f8:	8c 93       	st	X, r24
}
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <I2C_StartCondition>:

boolean I2C_StartCondition(void)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    270c:	e6 e5       	ldi	r30, 0x56	; 86
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	84 ea       	ldi	r24, 0xA4	; 164
    2712:	80 83       	st	Z, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2714:	e6 e5       	ldi	r30, 0x56	; 86
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	88 23       	and	r24, r24
    271c:	dc f7       	brge	.-10     	; 0x2714 <I2C_StartCondition+0x12>
    {
    	/*Do Nothing */
    	   ;
    }

    if (I2C_ReadStatus() != I2C_START_ACK)
    271e:	0e 94 3b 14 	call	0x2876	; 0x2876 <I2C_ReadStatus>
    2722:	88 30       	cpi	r24, 0x08	; 8
    2724:	11 f0       	breq	.+4      	; 0x272a <I2C_StartCondition+0x28>
    {
    	return FALSE;
    2726:	19 82       	std	Y+1, r1	; 0x01
    2728:	02 c0       	rjmp	.+4      	; 0x272e <I2C_StartCondition+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <I2C_RepeatedStartCondition>:

boolean I2C_RepeatedStartCondition(void)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	0f 92       	push	r0
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    2742:	a6 e5       	ldi	r26, 0x56	; 86
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e6 e5       	ldi	r30, 0x56	; 86
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	84 6a       	ori	r24, 0xA4	; 164
    274e:	8c 93       	st	X, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2750:	e6 e5       	ldi	r30, 0x56	; 86
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	88 23       	and	r24, r24
    2758:	dc f7       	brge	.-10     	; 0x2750 <I2C_RepeatedStartCondition+0x18>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_REP_START_ACK)
    275a:	0e 94 3b 14 	call	0x2876	; 0x2876 <I2C_ReadStatus>
    275e:	80 31       	cpi	r24, 0x10	; 16
    2760:	11 f0       	breq	.+4      	; 0x2766 <I2C_RepeatedStartCondition+0x2e>
    {
    	return FALSE;
    2762:	19 82       	std	Y+1, r1	; 0x01
    2764:	02 c0       	rjmp	.+4      	; 0x276a <I2C_RepeatedStartCondition+0x32>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	89 81       	ldd	r24, Y+1	; 0x01
}
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <I2C_StopCondition>:

void I2C_StopCondition(void)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    277c:	a6 e5       	ldi	r26, 0x56	; 86
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e6 e5       	ldi	r30, 0x56	; 86
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	84 69       	ori	r24, 0x94	; 148
    2788:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    278a:	e6 e5       	ldi	r30, 0x56	; 86
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	88 23       	and	r24, r24
    2792:	dc f7       	brge	.-10     	; 0x278a <I2C_StopCondition+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
}
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <I2C_WriteByte>:

void I2C_WriteByte(u8 data)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	0f 92       	push	r0
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	89 83       	std	Y+1, r24	; 0x01
    /*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    27a6:	e3 e2       	ldi	r30, 0x23	; 35
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	80 83       	st	Z, r24

    /*clear flag	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG;
    27ae:	a6 e5       	ldi	r26, 0x56	; 86
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e6 e5       	ldi	r30, 0x56	; 86
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	84 68       	ori	r24, 0x84	; 132
    27ba:	8c 93       	st	X, r24


	/*	Wait until data sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    27bc:	e6 e5       	ldi	r30, 0x56	; 86
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	88 23       	and	r24, r24
    27c4:	dc f7       	brge	.-10     	; 0x27bc <I2C_WriteByte+0x22>
    {
    	/*Do Nothing */
    	   ;
    }
}
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <I2C_Send_SlaveAddressWriteOperation>:

boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <I2C_Send_SlaveAddressWriteOperation+0x6>
    27d4:	0f 92       	push	r0
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    27dc:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	88 0f       	add	r24, r24
    27e2:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	0e 94 cd 13 	call	0x279a	; 0x279a <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    27ea:	0e 94 3b 14 	call	0x2876	; 0x2876 <I2C_ReadStatus>
    27ee:	88 31       	cpi	r24, 0x18	; 24
    27f0:	11 f0       	breq	.+4      	; 0x27f6 <I2C_Send_SlaveAddressWriteOperation+0x28>
    {
    	return FALSE;
    27f2:	1b 82       	std	Y+3, r1	; 0x03
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <I2C_Send_SlaveAddressWriteOperation+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	8b 83       	std	Y+3, r24	; 0x03
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <I2C_Send_SlaveAddressReadOperation>:

boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <I2C_Send_SlaveAddressReadOperation+0x6>
    280e:	0f 92       	push	r0
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    2816:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	81 60       	ori	r24, 0x01	; 1
    2824:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	0e 94 cd 13 	call	0x279a	; 0x279a <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    282c:	0e 94 3b 14 	call	0x2876	; 0x2876 <I2C_ReadStatus>
    2830:	80 34       	cpi	r24, 0x40	; 64
    2832:	11 f0       	breq	.+4      	; 0x2838 <I2C_Send_SlaveAddressReadOperation+0x30>
    {
    	return FALSE;
    2834:	1b 82       	std	Y+3, r1	; 0x03
    2836:	02 c0       	rjmp	.+4      	; 0x283c <I2C_Send_SlaveAddressReadOperation+0x34>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	8b 83       	std	Y+3, r24	; 0x03
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <I2C_ReadByte>:

u8 I2C_ReadByte(void)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |=  I2C_ENABLE|I2C_INTERRUPT_FLAG;
    2852:	a6 e5       	ldi	r26, 0x56	; 86
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e6 e5       	ldi	r30, 0x56	; 86
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	84 68       	ori	r24, 0x84	; 132
    285e:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2860:	e6 e5       	ldi	r30, 0x56	; 86
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	88 23       	and	r24, r24
    2868:	dc f7       	brge	.-10     	; 0x2860 <I2C_ReadByte+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
    return I2C_TWDR_REG;
    286a:	e3 e2       	ldi	r30, 0x23	; 35
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <I2C_ReadStatus>:

u8 I2C_ReadStatus(void)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	0f 92       	push	r0
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    status = I2C_TWSR_REG & 0xF8;// 1111 1000
    2880:	e1 e2       	ldi	r30, 0x21	; 33
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	88 7f       	andi	r24, 0xF8	; 248
    2888:	89 83       	std	Y+1, r24	; 0x01
    return status;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <GINT_vidEnableAllInetrrupts>:
#include "GINT.h"
#include "Bit_Math.h"


void GINT_vidEnableAllInetrrupts (void)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG , 7);
    289c:	af e5       	ldi	r26, 0x5F	; 95
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	ef e5       	ldi	r30, 0x5F	; 95
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	80 68       	ori	r24, 0x80	; 128
    28a8:	8c 93       	st	X, r24
}
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <GINT_vidDisableAllInetrrupts>:

void GINT_vidDisableAllInetrrupts (void)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG , 7);
    28b8:	af e5       	ldi	r26, 0x5F	; 95
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ef e5       	ldi	r30, 0x5F	; 95
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 77       	andi	r24, 0x7F	; 127
    28c4:	8c 93       	st	X, r24
}
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <ExtInt_vidConfigExtInt>:
#include "ExInt_Reg.h"
#include "ExInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt (extint_id_t INTid   , extint_sensectrl  senseCtrl)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <ExtInt_vidConfigExtInt+0x6>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <ExtInt_vidConfigExtInt+0x8>
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	6a 83       	std	Y+2, r22	; 0x02
	switch (INTid)
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	3c 83       	std	Y+4, r19	; 0x04
    28e4:	2b 83       	std	Y+3, r18	; 0x03
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	91 05       	cpc	r25, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <ExtInt_vidConfigExtInt+0x26>
    28f0:	5a c0       	rjmp	.+180    	; 0x29a6 <ExtInt_vidConfigExtInt+0xda>
    28f2:	2b 81       	ldd	r18, Y+3	; 0x03
    28f4:	3c 81       	ldd	r19, Y+4	; 0x04
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <ExtInt_vidConfigExtInt+0x32>
    28fc:	a3 c0       	rjmp	.+326    	; 0x2a44 <ExtInt_vidConfigExtInt+0x178>
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	09 f0       	breq	.+2      	; 0x2908 <ExtInt_vidConfigExtInt+0x3c>
    2906:	ba c0       	rjmp	.+372    	; 0x2a7c <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		if (senseCtrl == EXT_RISING_EDGE)
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	79 f4       	brne	.+30     	; 0x292c <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG , 0);
    290e:	a5 e5       	ldi	r26, 0x55	; 85
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e5 e5       	ldi	r30, 0x55	; 85
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	81 60       	ori	r24, 0x01	; 1
    291a:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 1);
    291c:	a5 e5       	ldi	r26, 0x55	; 85
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e5 e5       	ldi	r30, 0x55	; 85
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	82 60       	ori	r24, 0x02	; 2
    2928:	8c 93       	st	X, r24
    292a:	35 c0       	rjmp	.+106    	; 0x2996 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (senseCtrl == EXT_FALLING_EDGE)
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	88 23       	and	r24, r24
    2930:	79 f4       	brne	.+30     	; 0x2950 <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 0);
    2932:	a5 e5       	ldi	r26, 0x55	; 85
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e5 e5       	ldi	r30, 0x55	; 85
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	8e 7f       	andi	r24, 0xFE	; 254
    293e:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 1);
    2940:	a5 e5       	ldi	r26, 0x55	; 85
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e5 e5       	ldi	r30, 0x55	; 85
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	82 60       	ori	r24, 0x02	; 2
    294c:	8c 93       	st	X, r24
    294e:	23 c0       	rjmp	.+70     	; 0x2996 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (senseCtrl == EXT_BOTH_EDGE)
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	82 30       	cpi	r24, 0x02	; 2
    2954:	79 f4       	brne	.+30     	; 0x2974 <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG , 0);
    2956:	a5 e5       	ldi	r26, 0x55	; 85
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e5 e5       	ldi	r30, 0x55	; 85
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	81 60       	ori	r24, 0x01	; 1
    2962:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 1);
    2964:	a5 e5       	ldi	r26, 0x55	; 85
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e5 e5       	ldi	r30, 0x55	; 85
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	8d 7f       	andi	r24, 0xFD	; 253
    2970:	8c 93       	st	X, r24
    2972:	11 c0       	rjmp	.+34     	; 0x2996 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (senseCtrl == EXT_LOW_EDGE)
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	83 30       	cpi	r24, 0x03	; 3
    2978:	71 f4       	brne	.+28     	; 0x2996 <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 0);
    297a:	a5 e5       	ldi	r26, 0x55	; 85
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e5 e5       	ldi	r30, 0x55	; 85
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	8e 7f       	andi	r24, 0xFE	; 254
    2986:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 1);
    2988:	a5 e5       	ldi	r26, 0x55	; 85
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e5       	ldi	r30, 0x55	; 85
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8d 7f       	andi	r24, 0xFD	; 253
    2994:	8c 93       	st	X, r24
		}

		SET_BIT(EXTINT_GICR_REG , INT0_EN_BIT);
    2996:	ab e5       	ldi	r26, 0x5B	; 91
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	eb e5       	ldi	r30, 0x5B	; 91
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	80 64       	ori	r24, 0x40	; 64
    29a2:	8c 93       	st	X, r24
    29a4:	6b c0       	rjmp	.+214    	; 0x2a7c <ExtInt_vidConfigExtInt+0x1b0>
		break;


	case EXT_INT1:
		if (senseCtrl == EXT_RISING_EDGE)
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	79 f4       	brne	.+30     	; 0x29ca <ExtInt_vidConfigExtInt+0xfe>
		{
			SET_BIT(EXTINT_MCUCR_REG , 2);
    29ac:	a5 e5       	ldi	r26, 0x55	; 85
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e5 e5       	ldi	r30, 0x55	; 85
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	84 60       	ori	r24, 0x04	; 4
    29b8:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 3);
    29ba:	a5 e5       	ldi	r26, 0x55	; 85
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e5 e5       	ldi	r30, 0x55	; 85
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	88 60       	ori	r24, 0x08	; 8
    29c6:	8c 93       	st	X, r24
    29c8:	35 c0       	rjmp	.+106    	; 0x2a34 <ExtInt_vidConfigExtInt+0x168>
		}
		else if (senseCtrl == EXT_FALLING_EDGE)
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	88 23       	and	r24, r24
    29ce:	79 f4       	brne	.+30     	; 0x29ee <ExtInt_vidConfigExtInt+0x122>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 2);
    29d0:	a5 e5       	ldi	r26, 0x55	; 85
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e5       	ldi	r30, 0x55	; 85
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8b 7f       	andi	r24, 0xFB	; 251
    29dc:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG , 3);
    29de:	a5 e5       	ldi	r26, 0x55	; 85
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e5       	ldi	r30, 0x55	; 85
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	88 60       	ori	r24, 0x08	; 8
    29ea:	8c 93       	st	X, r24
    29ec:	23 c0       	rjmp	.+70     	; 0x2a34 <ExtInt_vidConfigExtInt+0x168>
		}
		else if (senseCtrl == EXT_BOTH_EDGE)
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	82 30       	cpi	r24, 0x02	; 2
    29f2:	79 f4       	brne	.+30     	; 0x2a12 <ExtInt_vidConfigExtInt+0x146>
		{
			SET_BIT(EXTINT_MCUCR_REG , 2);
    29f4:	a5 e5       	ldi	r26, 0x55	; 85
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e5 e5       	ldi	r30, 0x55	; 85
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	84 60       	ori	r24, 0x04	; 4
    2a00:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 3);
    2a02:	a5 e5       	ldi	r26, 0x55	; 85
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e5 e5       	ldi	r30, 0x55	; 85
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	87 7f       	andi	r24, 0xF7	; 247
    2a0e:	8c 93       	st	X, r24
    2a10:	11 c0       	rjmp	.+34     	; 0x2a34 <ExtInt_vidConfigExtInt+0x168>
		}
		else if (senseCtrl == EXT_LOW_EDGE)
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	83 30       	cpi	r24, 0x03	; 3
    2a16:	71 f4       	brne	.+28     	; 0x2a34 <ExtInt_vidConfigExtInt+0x168>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG , 2);
    2a18:	a5 e5       	ldi	r26, 0x55	; 85
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e5 e5       	ldi	r30, 0x55	; 85
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	8b 7f       	andi	r24, 0xFB	; 251
    2a24:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG , 3);
    2a26:	a5 e5       	ldi	r26, 0x55	; 85
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e5 e5       	ldi	r30, 0x55	; 85
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	87 7f       	andi	r24, 0xF7	; 247
    2a32:	8c 93       	st	X, r24
		}

		SET_BIT(EXTINT_GICR_REG , INT1_EN_BIT);
    2a34:	ab e5       	ldi	r26, 0x5B	; 91
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	eb e5       	ldi	r30, 0x5B	; 91
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 68       	ori	r24, 0x80	; 128
    2a40:	8c 93       	st	X, r24
    2a42:	1c c0       	rjmp	.+56     	; 0x2a7c <ExtInt_vidConfigExtInt+0x1b0>
		break;


	case EXT_INT2:

		if (senseCtrl == EXT_RISING_EDGE)
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	41 f4       	brne	.+16     	; 0x2a5a <ExtInt_vidConfigExtInt+0x18e>
		{
			SET_BIT(EXTINT_MCUCSR_REG , 6);
    2a4a:	a4 e5       	ldi	r26, 0x54	; 84
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e4 e5       	ldi	r30, 0x54	; 84
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	80 64       	ori	r24, 0x40	; 64
    2a56:	8c 93       	st	X, r24
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (senseCtrl == EXT_FALLING_EDGE)
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	88 23       	and	r24, r24
    2a5e:	39 f4       	brne	.+14     	; 0x2a6e <ExtInt_vidConfigExtInt+0x1a2>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG , 6);
    2a60:	a4 e5       	ldi	r26, 0x54	; 84
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e4 e5       	ldi	r30, 0x54	; 84
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8f 7b       	andi	r24, 0xBF	; 191
    2a6c:	8c 93       	st	X, r24
		}

		SET_BIT(EXTINT_GICR_REG , INT2_EN_BIT);
    2a6e:	ab e5       	ldi	r26, 0x5B	; 91
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	eb e5       	ldi	r30, 0x5B	; 91
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	80 62       	ori	r24, 0x20	; 32
    2a7a:	8c 93       	st	X, r24
		break;
	}
}
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <ExtInt_vidDisapleExtInt>:

void ExtInt_vidDisapleExtInt (extint_id_t INTid )
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <ExtInt_vidDisapleExtInt+0x6>
    2a90:	0f 92       	push	r0
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	89 83       	std	Y+1, r24	; 0x01
	switch (INTid)
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	3b 83       	std	Y+3, r19	; 0x03
    2aa0:	2a 83       	std	Y+2, r18	; 0x02
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa6:	81 30       	cpi	r24, 0x01	; 1
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	89 f0       	breq	.+34     	; 0x2ace <ExtInt_vidDisapleExtInt+0x44>
    2aac:	2a 81       	ldd	r18, Y+2	; 0x02
    2aae:	3b 81       	ldd	r19, Y+3	; 0x03
    2ab0:	22 30       	cpi	r18, 0x02	; 2
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	a1 f0       	breq	.+40     	; 0x2ade <ExtInt_vidDisapleExtInt+0x54>
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	b9 f4       	brne	.+46     	; 0x2aec <ExtInt_vidDisapleExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2abe:	ab e5       	ldi	r26, 0x5B	; 91
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	eb e5       	ldi	r30, 0x5B	; 91
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 64       	ori	r24, 0x40	; 64
    2aca:	8c 93       	st	X, r24
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <ExtInt_vidDisapleExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    2ace:	ab e5       	ldi	r26, 0x5B	; 91
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	eb e5       	ldi	r30, 0x5B	; 91
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 68       	ori	r24, 0x80	; 128
    2ada:	8c 93       	st	X, r24
    2adc:	07 c0       	rjmp	.+14     	; 0x2aec <ExtInt_vidDisapleExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    2ade:	ab e5       	ldi	r26, 0x5B	; 91
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	eb e5       	ldi	r30, 0x5B	; 91
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	80 62       	ori	r24, 0x20	; 32
    2aea:	8c 93       	st	X, r24
		break;
	}
}
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <Dio_vidconfigChanel>:
#include "Dio.h"
#include "Bit_Math.h"


void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <Dio_vidconfigChanel+0x6>
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <Dio_vidconfigChanel+0x8>
    2b00:	0f 92       	push	r0
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	6a 83       	std	Y+2, r22	; 0x02
    2b0a:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	3d 83       	std	Y+5, r19	; 0x05
    2b14:	2c 83       	std	Y+4, r18	; 0x04
    2b16:	8c 81       	ldd	r24, Y+4	; 0x04
    2b18:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <Dio_vidconfigChanel+0x2a>
    2b20:	43 c0       	rjmp	.+134    	; 0x2ba8 <Dio_vidconfigChanel+0xb0>
    2b22:	2c 81       	ldd	r18, Y+4	; 0x04
    2b24:	3d 81       	ldd	r19, Y+5	; 0x05
    2b26:	22 30       	cpi	r18, 0x02	; 2
    2b28:	31 05       	cpc	r19, r1
    2b2a:	2c f4       	brge	.+10     	; 0x2b36 <Dio_vidconfigChanel+0x3e>
    2b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	71 f0       	breq	.+28     	; 0x2b50 <Dio_vidconfigChanel+0x58>
    2b34:	bc c0       	rjmp	.+376    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
    2b36:	2c 81       	ldd	r18, Y+4	; 0x04
    2b38:	3d 81       	ldd	r19, Y+5	; 0x05
    2b3a:	22 30       	cpi	r18, 0x02	; 2
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <Dio_vidconfigChanel+0x4a>
    2b40:	5f c0       	rjmp	.+190    	; 0x2c00 <Dio_vidconfigChanel+0x108>
    2b42:	8c 81       	ldd	r24, Y+4	; 0x04
    2b44:	9d 81       	ldd	r25, Y+5	; 0x05
    2b46:	83 30       	cpi	r24, 0x03	; 3
    2b48:	91 05       	cpc	r25, r1
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <Dio_vidconfigChanel+0x56>
    2b4c:	85 c0       	rjmp	.+266    	; 0x2c58 <Dio_vidconfigChanel+0x160>
    2b4e:	af c0       	rjmp	.+350    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	88 23       	and	r24, r24
    2b54:	a9 f4       	brne	.+42     	; 0x2b80 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2b56:	aa e3       	ldi	r26, 0x3A	; 58
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	ea e3       	ldi	r30, 0x3A	; 58
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 2f       	mov	r20, r24
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 2e       	mov	r0, r18
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <Dio_vidconfigChanel+0x7c>
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	0a 94       	dec	r0
    2b76:	e2 f7       	brpl	.-8      	; 0x2b70 <Dio_vidconfigChanel+0x78>
    2b78:	80 95       	com	r24
    2b7a:	84 23       	and	r24, r20
    2b7c:	8c 93       	st	X, r24
    2b7e:	97 c0       	rjmp	.+302    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2b80:	aa e3       	ldi	r26, 0x3A	; 58
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	ea e3       	ldi	r30, 0x3A	; 58
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	48 2f       	mov	r20, r24
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	02 2e       	mov	r0, r18
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <Dio_vidconfigChanel+0xa6>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	0a 94       	dec	r0
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <Dio_vidconfigChanel+0xa2>
    2ba2:	84 2b       	or	r24, r20
    2ba4:	8c 93       	st	X, r24
    2ba6:	83 c0       	rjmp	.+262    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	88 23       	and	r24, r24
    2bac:	a9 f4       	brne	.+42     	; 0x2bd8 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    2bae:	a7 e3       	ldi	r26, 0x37	; 55
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e7 e3       	ldi	r30, 0x37	; 55
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	48 2f       	mov	r20, r24
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	02 2e       	mov	r0, r18
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <Dio_vidconfigChanel+0xd4>
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	0a 94       	dec	r0
    2bce:	e2 f7       	brpl	.-8      	; 0x2bc8 <Dio_vidconfigChanel+0xd0>
    2bd0:	80 95       	com	r24
    2bd2:	84 23       	and	r24, r20
    2bd4:	8c 93       	st	X, r24
    2bd6:	6b c0       	rjmp	.+214    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2bd8:	a7 e3       	ldi	r26, 0x37	; 55
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e7 e3       	ldi	r30, 0x37	; 55
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	48 2f       	mov	r20, r24
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	02 2e       	mov	r0, r18
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <Dio_vidconfigChanel+0xfe>
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	0a 94       	dec	r0
    2bf8:	e2 f7       	brpl	.-8      	; 0x2bf2 <Dio_vidconfigChanel+0xfa>
    2bfa:	84 2b       	or	r24, r20
    2bfc:	8c 93       	st	X, r24
    2bfe:	57 c0       	rjmp	.+174    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	88 23       	and	r24, r24
    2c04:	a9 f4       	brne	.+42     	; 0x2c30 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    2c06:	a4 e3       	ldi	r26, 0x34	; 52
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e4 e3       	ldi	r30, 0x34	; 52
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	48 2f       	mov	r20, r24
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 2e       	mov	r0, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <Dio_vidconfigChanel+0x12c>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	0a 94       	dec	r0
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <Dio_vidconfigChanel+0x128>
    2c28:	80 95       	com	r24
    2c2a:	84 23       	and	r24, r20
    2c2c:	8c 93       	st	X, r24
    2c2e:	3f c0       	rjmp	.+126    	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    2c30:	a4 e3       	ldi	r26, 0x34	; 52
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e4 e3       	ldi	r30, 0x34	; 52
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	48 2f       	mov	r20, r24
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	02 2e       	mov	r0, r18
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <Dio_vidconfigChanel+0x156>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	0a 94       	dec	r0
    2c50:	e2 f7       	brpl	.-8      	; 0x2c4a <Dio_vidconfigChanel+0x152>
    2c52:	84 2b       	or	r24, r20
    2c54:	8c 93       	st	X, r24
    2c56:	2b c0       	rjmp	.+86     	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	88 23       	and	r24, r24
    2c5c:	a9 f4       	brne	.+42     	; 0x2c88 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    2c5e:	a1 e3       	ldi	r26, 0x31	; 49
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e1 e3       	ldi	r30, 0x31	; 49
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	48 2f       	mov	r20, r24
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	02 2e       	mov	r0, r18
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <Dio_vidconfigChanel+0x184>
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	0a 94       	dec	r0
    2c7e:	e2 f7       	brpl	.-8      	; 0x2c78 <Dio_vidconfigChanel+0x180>
    2c80:	80 95       	com	r24
    2c82:	84 23       	and	r24, r20
    2c84:	8c 93       	st	X, r24
    2c86:	13 c0       	rjmp	.+38     	; 0x2cae <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2c88:	a1 e3       	ldi	r26, 0x31	; 49
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e1 e3       	ldi	r30, 0x31	; 49
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	48 2f       	mov	r20, r24
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	02 2e       	mov	r0, r18
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <Dio_vidconfigChanel+0x1ae>
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	0a 94       	dec	r0
    2ca8:	e2 f7       	brpl	.-8      	; 0x2ca2 <Dio_vidconfigChanel+0x1aa>
    2caa:	84 2b       	or	r24, r20
    2cac:	8c 93       	st	X, r24
		}
		break;
	}
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <Dio_vidwriteChanel+0x6>
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <Dio_vidwriteChanel+0x8>
    2cc6:	0f 92       	push	r0
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	6a 83       	std	Y+2, r22	; 0x02
    2cd0:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	3d 83       	std	Y+5, r19	; 0x05
    2cda:	2c 83       	std	Y+4, r18	; 0x04
    2cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cde:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce0:	81 30       	cpi	r24, 0x01	; 1
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <Dio_vidwriteChanel+0x2a>
    2ce6:	43 c0       	rjmp	.+134    	; 0x2d6e <Dio_vidwriteChanel+0xb0>
    2ce8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cea:	3d 81       	ldd	r19, Y+5	; 0x05
    2cec:	22 30       	cpi	r18, 0x02	; 2
    2cee:	31 05       	cpc	r19, r1
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <Dio_vidwriteChanel+0x3e>
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	71 f0       	breq	.+28     	; 0x2d16 <Dio_vidwriteChanel+0x58>
    2cfa:	bc c0       	rjmp	.+376    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
    2cfc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cfe:	3d 81       	ldd	r19, Y+5	; 0x05
    2d00:	22 30       	cpi	r18, 0x02	; 2
    2d02:	31 05       	cpc	r19, r1
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <Dio_vidwriteChanel+0x4a>
    2d06:	5f c0       	rjmp	.+190    	; 0x2dc6 <Dio_vidwriteChanel+0x108>
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	83 30       	cpi	r24, 0x03	; 3
    2d0e:	91 05       	cpc	r25, r1
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <Dio_vidwriteChanel+0x56>
    2d12:	85 c0       	rjmp	.+266    	; 0x2e1e <Dio_vidwriteChanel+0x160>
    2d14:	af c0       	rjmp	.+350    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	a1 f4       	brne	.+40     	; 0x2d44 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2d1c:	ab e3       	ldi	r26, 0x3B	; 59
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	eb e3       	ldi	r30, 0x3B	; 59
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	48 2f       	mov	r20, r24
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 2e       	mov	r0, r18
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <Dio_vidwriteChanel+0x7c>
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	0a 94       	dec	r0
    2d3c:	e2 f7       	brpl	.-8      	; 0x2d36 <Dio_vidwriteChanel+0x78>
    2d3e:	84 2b       	or	r24, r20
    2d40:	8c 93       	st	X, r24
    2d42:	98 c0       	rjmp	.+304    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2d44:	ab e3       	ldi	r26, 0x3B	; 59
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	eb e3       	ldi	r30, 0x3B	; 59
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	48 2f       	mov	r20, r24
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	02 2e       	mov	r0, r18
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <Dio_vidwriteChanel+0xa4>
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	0a 94       	dec	r0
    2d64:	e2 f7       	brpl	.-8      	; 0x2d5e <Dio_vidwriteChanel+0xa0>
    2d66:	80 95       	com	r24
    2d68:	84 23       	and	r24, r20
    2d6a:	8c 93       	st	X, r24
    2d6c:	83 c0       	rjmp	.+262    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	81 30       	cpi	r24, 0x01	; 1
    2d72:	a1 f4       	brne	.+40     	; 0x2d9c <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2d74:	a8 e3       	ldi	r26, 0x38	; 56
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e8 e3       	ldi	r30, 0x38	; 56
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	48 2f       	mov	r20, r24
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	02 2e       	mov	r0, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <Dio_vidwriteChanel+0xd4>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	0a 94       	dec	r0
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <Dio_vidwriteChanel+0xd0>
    2d96:	84 2b       	or	r24, r20
    2d98:	8c 93       	st	X, r24
    2d9a:	6c c0       	rjmp	.+216    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2d9c:	a8 e3       	ldi	r26, 0x38	; 56
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e8 e3       	ldi	r30, 0x38	; 56
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	48 2f       	mov	r20, r24
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	02 2e       	mov	r0, r18
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <Dio_vidwriteChanel+0xfc>
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	0a 94       	dec	r0
    2dbc:	e2 f7       	brpl	.-8      	; 0x2db6 <Dio_vidwriteChanel+0xf8>
    2dbe:	80 95       	com	r24
    2dc0:	84 23       	and	r24, r20
    2dc2:	8c 93       	st	X, r24
    2dc4:	57 c0       	rjmp	.+174    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	a1 f4       	brne	.+40     	; 0x2df4 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2dcc:	a5 e3       	ldi	r26, 0x35	; 53
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e5 e3       	ldi	r30, 0x35	; 53
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	48 2f       	mov	r20, r24
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	02 2e       	mov	r0, r18
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <Dio_vidwriteChanel+0x12c>
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	0a 94       	dec	r0
    2dec:	e2 f7       	brpl	.-8      	; 0x2de6 <Dio_vidwriteChanel+0x128>
    2dee:	84 2b       	or	r24, r20
    2df0:	8c 93       	st	X, r24
    2df2:	40 c0       	rjmp	.+128    	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2df4:	a5 e3       	ldi	r26, 0x35	; 53
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e5 e3       	ldi	r30, 0x35	; 53
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	48 2f       	mov	r20, r24
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	02 2e       	mov	r0, r18
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <Dio_vidwriteChanel+0x154>
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	0a 94       	dec	r0
    2e14:	e2 f7       	brpl	.-8      	; 0x2e0e <Dio_vidwriteChanel+0x150>
    2e16:	80 95       	com	r24
    2e18:	84 23       	and	r24, r20
    2e1a:	8c 93       	st	X, r24
    2e1c:	2b c0       	rjmp	.+86     	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	a1 f4       	brne	.+40     	; 0x2e4c <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2e24:	a2 e3       	ldi	r26, 0x32	; 50
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e2 e3       	ldi	r30, 0x32	; 50
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	48 2f       	mov	r20, r24
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	02 2e       	mov	r0, r18
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <Dio_vidwriteChanel+0x184>
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	0a 94       	dec	r0
    2e44:	e2 f7       	brpl	.-8      	; 0x2e3e <Dio_vidwriteChanel+0x180>
    2e46:	84 2b       	or	r24, r20
    2e48:	8c 93       	st	X, r24
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2e4c:	a2 e3       	ldi	r26, 0x32	; 50
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	e2 e3       	ldi	r30, 0x32	; 50
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	48 2f       	mov	r20, r24
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 2e       	mov	r0, r18
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <Dio_vidwriteChanel+0x1ac>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	0a 94       	dec	r0
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <Dio_vidwriteChanel+0x1a8>
    2e6e:	80 95       	com	r24
    2e70:	84 23       	and	r24, r20
    2e72:	8c 93       	st	X, r24
		}
		break;
	}
}
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup (dio_port_t port , u8 data , u8 mask)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <Dio_vidWriteChanelGroup+0x6>
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <Dio_vidWriteChanelGroup+0x8>
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	89 83       	std	Y+1, r24	; 0x01
    2e94:	6a 83       	std	Y+2, r22	; 0x02
    2e96:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	3d 83       	std	Y+5, r19	; 0x05
    2ea0:	2c 83       	std	Y+4, r18	; 0x04
    2ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	01 f1       	breq	.+64     	; 0x2eec <Dio_vidWriteChanelGroup+0x68>
    2eac:	2c 81       	ldd	r18, Y+4	; 0x04
    2eae:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb0:	22 30       	cpi	r18, 0x02	; 2
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	2c f4       	brge	.+10     	; 0x2ec0 <Dio_vidWriteChanelGroup+0x3c>
    2eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	61 f0       	breq	.+24     	; 0x2ed6 <Dio_vidWriteChanelGroup+0x52>
    2ebe:	36 c0       	rjmp	.+108    	; 0x2f2c <Dio_vidWriteChanelGroup+0xa8>
    2ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec4:	22 30       	cpi	r18, 0x02	; 2
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	e1 f0       	breq	.+56     	; 0x2f02 <Dio_vidWriteChanelGroup+0x7e>
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ece:	83 30       	cpi	r24, 0x03	; 3
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	11 f1       	breq	.+68     	; 0x2f18 <Dio_vidWriteChanelGroup+0x94>
    2ed4:	2b c0       	rjmp	.+86     	; 0x2f2c <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2ed6:	ab e3       	ldi	r26, 0x3B	; 59
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	eb e3       	ldi	r30, 0x3B	; 59
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	90 81       	ld	r25, Z
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	98 23       	and	r25, r24
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	89 2b       	or	r24, r25
    2ee8:	8c 93       	st	X, r24
    2eea:	20 c0       	rjmp	.+64     	; 0x2f2c <Dio_vidWriteChanelGroup+0xa8>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    2eec:	a8 e3       	ldi	r26, 0x38	; 56
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e8 e3       	ldi	r30, 0x38	; 56
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	90 81       	ld	r25, Z
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	98 23       	and	r25, r24
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	89 2b       	or	r24, r25
    2efe:	8c 93       	st	X, r24
    2f00:	15 c0       	rjmp	.+42     	; 0x2f2c <Dio_vidWriteChanelGroup+0xa8>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2f02:	a5 e3       	ldi	r26, 0x35	; 53
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e5 e3       	ldi	r30, 0x35	; 53
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	90 81       	ld	r25, Z
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	98 23       	and	r25, r24
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	89 2b       	or	r24, r25
    2f14:	8c 93       	st	X, r24
    2f16:	0a c0       	rjmp	.+20     	; 0x2f2c <Dio_vidWriteChanelGroup+0xa8>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2f18:	a2 e3       	ldi	r26, 0x32	; 50
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e2 e3       	ldi	r30, 0x32	; 50
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	90 81       	ld	r25, Z
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	98 23       	and	r25, r24
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	89 2b       	or	r24, r25
    2f2a:	8c 93       	st	X, r24
		break;
	}

}
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <Dio_udtreadChanel+0x6>
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <Dio_udtreadChanel+0x8>
    2f44:	0f 92       	push	r0
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	8a 83       	std	Y+2, r24	; 0x02
    2f4c:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2f4e:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	3d 83       	std	Y+5, r19	; 0x05
    2f58:	2c 83       	std	Y+4, r18	; 0x04
    2f5a:	4c 81       	ldd	r20, Y+4	; 0x04
    2f5c:	5d 81       	ldd	r21, Y+5	; 0x05
    2f5e:	41 30       	cpi	r20, 0x01	; 1
    2f60:	51 05       	cpc	r21, r1
    2f62:	79 f1       	breq	.+94     	; 0x2fc2 <Dio_udtreadChanel+0x86>
    2f64:	8c 81       	ldd	r24, Y+4	; 0x04
    2f66:	9d 81       	ldd	r25, Y+5	; 0x05
    2f68:	82 30       	cpi	r24, 0x02	; 2
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	34 f4       	brge	.+12     	; 0x2f7a <Dio_udtreadChanel+0x3e>
    2f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f70:	3d 81       	ldd	r19, Y+5	; 0x05
    2f72:	21 15       	cp	r18, r1
    2f74:	31 05       	cpc	r19, r1
    2f76:	69 f0       	breq	.+26     	; 0x2f92 <Dio_udtreadChanel+0x56>
    2f78:	6b c0       	rjmp	.+214    	; 0x3050 <Dio_udtreadChanel+0x114>
    2f7a:	4c 81       	ldd	r20, Y+4	; 0x04
    2f7c:	5d 81       	ldd	r21, Y+5	; 0x05
    2f7e:	42 30       	cpi	r20, 0x02	; 2
    2f80:	51 05       	cpc	r21, r1
    2f82:	b9 f1       	breq	.+110    	; 0x2ff2 <Dio_udtreadChanel+0xb6>
    2f84:	8c 81       	ldd	r24, Y+4	; 0x04
    2f86:	9d 81       	ldd	r25, Y+5	; 0x05
    2f88:	83 30       	cpi	r24, 0x03	; 3
    2f8a:	91 05       	cpc	r25, r1
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <Dio_udtreadChanel+0x54>
    2f8e:	49 c0       	rjmp	.+146    	; 0x3022 <Dio_udtreadChanel+0xe6>
    2f90:	5f c0       	rjmp	.+190    	; 0x3050 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2f92:	e9 e3       	ldi	r30, 0x39	; 57
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a9 01       	movw	r20, r18
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <Dio_udtreadChanel+0x6e>
    2fa6:	55 95       	asr	r21
    2fa8:	47 95       	ror	r20
    2faa:	8a 95       	dec	r24
    2fac:	e2 f7       	brpl	.-8      	; 0x2fa6 <Dio_udtreadChanel+0x6a>
    2fae:	ca 01       	movw	r24, r20
    2fb0:	81 70       	andi	r24, 0x01	; 1
    2fb2:	90 70       	andi	r25, 0x00	; 0
    2fb4:	88 23       	and	r24, r24
    2fb6:	19 f0       	breq	.+6      	; 0x2fbe <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	49 c0       	rjmp	.+146    	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2fbe:	19 82       	std	Y+1, r1	; 0x01
    2fc0:	47 c0       	rjmp	.+142    	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2fc2:	e6 e3       	ldi	r30, 0x36	; 54
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	28 2f       	mov	r18, r24
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a9 01       	movw	r20, r18
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <Dio_udtreadChanel+0x9e>
    2fd6:	55 95       	asr	r21
    2fd8:	47 95       	ror	r20
    2fda:	8a 95       	dec	r24
    2fdc:	e2 f7       	brpl	.-8      	; 0x2fd6 <Dio_udtreadChanel+0x9a>
    2fde:	ca 01       	movw	r24, r20
    2fe0:	81 70       	andi	r24, 0x01	; 1
    2fe2:	90 70       	andi	r25, 0x00	; 0
    2fe4:	88 23       	and	r24, r24
    2fe6:	19 f0       	breq	.+6      	; 0x2fee <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	31 c0       	rjmp	.+98     	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2fee:	19 82       	std	Y+1, r1	; 0x01
    2ff0:	2f c0       	rjmp	.+94     	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2ff2:	e3 e3       	ldi	r30, 0x33	; 51
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a9 01       	movw	r20, r18
    3004:	02 c0       	rjmp	.+4      	; 0x300a <Dio_udtreadChanel+0xce>
    3006:	55 95       	asr	r21
    3008:	47 95       	ror	r20
    300a:	8a 95       	dec	r24
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <Dio_udtreadChanel+0xca>
    300e:	ca 01       	movw	r24, r20
    3010:	81 70       	andi	r24, 0x01	; 1
    3012:	90 70       	andi	r25, 0x00	; 0
    3014:	88 23       	and	r24, r24
    3016:	19 f0       	breq	.+6      	; 0x301e <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	19 c0       	rjmp	.+50     	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    301e:	19 82       	std	Y+1, r1	; 0x01
    3020:	17 c0       	rjmp	.+46     	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    3022:	e0 e3       	ldi	r30, 0x30	; 48
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a9 01       	movw	r20, r18
    3034:	02 c0       	rjmp	.+4      	; 0x303a <Dio_udtreadChanel+0xfe>
    3036:	55 95       	asr	r21
    3038:	47 95       	ror	r20
    303a:	8a 95       	dec	r24
    303c:	e2 f7       	brpl	.-8      	; 0x3036 <Dio_udtreadChanel+0xfa>
    303e:	ca 01       	movw	r24, r20
    3040:	81 70       	andi	r24, 0x01	; 1
    3042:	90 70       	andi	r25, 0x00	; 0
    3044:	88 23       	and	r24, r24
    3046:	19 f0       	breq	.+6      	; 0x304e <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	89 83       	std	Y+1, r24	; 0x01
    304c:	01 c0       	rjmp	.+2      	; 0x3050 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    304e:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    3050:	89 81       	ldd	r24, Y+1	; 0x01
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	00 d0       	rcall	.+0      	; 0x3068 <Dio_vidflipChanel+0x6>
    3068:	00 d0       	rcall	.+0      	; 0x306a <Dio_vidflipChanel+0x8>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	3c 83       	std	Y+4, r19	; 0x04
    307a:	2b 83       	std	Y+3, r18	; 0x03
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	9c 81       	ldd	r25, Y+4	; 0x04
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	91 05       	cpc	r25, r1
    3084:	49 f1       	breq	.+82     	; 0x30d8 <Dio_vidflipChanel+0x76>
    3086:	2b 81       	ldd	r18, Y+3	; 0x03
    3088:	3c 81       	ldd	r19, Y+4	; 0x04
    308a:	22 30       	cpi	r18, 0x02	; 2
    308c:	31 05       	cpc	r19, r1
    308e:	2c f4       	brge	.+10     	; 0x309a <Dio_vidflipChanel+0x38>
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	9c 81       	ldd	r25, Y+4	; 0x04
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	61 f0       	breq	.+24     	; 0x30b0 <Dio_vidflipChanel+0x4e>
    3098:	5a c0       	rjmp	.+180    	; 0x314e <Dio_vidflipChanel+0xec>
    309a:	2b 81       	ldd	r18, Y+3	; 0x03
    309c:	3c 81       	ldd	r19, Y+4	; 0x04
    309e:	22 30       	cpi	r18, 0x02	; 2
    30a0:	31 05       	cpc	r19, r1
    30a2:	71 f1       	breq	.+92     	; 0x3100 <Dio_vidflipChanel+0x9e>
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	83 30       	cpi	r24, 0x03	; 3
    30aa:	91 05       	cpc	r25, r1
    30ac:	e9 f1       	breq	.+122    	; 0x3128 <Dio_vidflipChanel+0xc6>
    30ae:	4f c0       	rjmp	.+158    	; 0x314e <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    30b0:	ab e3       	ldi	r26, 0x3B	; 59
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	eb e3       	ldi	r30, 0x3B	; 59
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	48 2f       	mov	r20, r24
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	02 2e       	mov	r0, r18
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <Dio_vidflipChanel+0x6c>
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	0a 94       	dec	r0
    30d0:	e2 f7       	brpl	.-8      	; 0x30ca <Dio_vidflipChanel+0x68>
    30d2:	84 27       	eor	r24, r20
    30d4:	8c 93       	st	X, r24
    30d6:	3b c0       	rjmp	.+118    	; 0x314e <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    30d8:	a8 e3       	ldi	r26, 0x38	; 56
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e8 e3       	ldi	r30, 0x38	; 56
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	48 2f       	mov	r20, r24
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	02 2e       	mov	r0, r18
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <Dio_vidflipChanel+0x94>
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	0a 94       	dec	r0
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <Dio_vidflipChanel+0x90>
    30fa:	84 27       	eor	r24, r20
    30fc:	8c 93       	st	X, r24
    30fe:	27 c0       	rjmp	.+78     	; 0x314e <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    3100:	a5 e3       	ldi	r26, 0x35	; 53
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e5 e3       	ldi	r30, 0x35	; 53
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	48 2f       	mov	r20, r24
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	02 2e       	mov	r0, r18
    3118:	02 c0       	rjmp	.+4      	; 0x311e <Dio_vidflipChanel+0xbc>
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	0a 94       	dec	r0
    3120:	e2 f7       	brpl	.-8      	; 0x311a <Dio_vidflipChanel+0xb8>
    3122:	84 27       	eor	r24, r20
    3124:	8c 93       	st	X, r24
    3126:	13 c0       	rjmp	.+38     	; 0x314e <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    3128:	a2 e3       	ldi	r26, 0x32	; 50
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e2 e3       	ldi	r30, 0x32	; 50
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	48 2f       	mov	r20, r24
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	02 2e       	mov	r0, r18
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <Dio_vidflipChanel+0xe4>
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	0a 94       	dec	r0
    3148:	e2 f7       	brpl	.-8      	; 0x3142 <Dio_vidflipChanel+0xe0>
    314a:	84 27       	eor	r24, r20
    314c:	8c 93       	st	X, r24
		break;
	}
}
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <Dio_vidPullUpEnalple>:

void Dio_vidPullUpEnalple (dio_port_t port, dio_pin_t pin)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <Dio_vidPullUpEnalple+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <Dio_vidPullUpEnalple+0x8>
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	89 83       	std	Y+1, r24	; 0x01
    316a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	3c 83       	std	Y+4, r19	; 0x04
    3174:	2b 83       	std	Y+3, r18	; 0x03
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	9c 81       	ldd	r25, Y+4	; 0x04
    317a:	81 30       	cpi	r24, 0x01	; 1
    317c:	91 05       	cpc	r25, r1
    317e:	49 f1       	breq	.+82     	; 0x31d2 <Dio_vidPullUpEnalple+0x76>
    3180:	2b 81       	ldd	r18, Y+3	; 0x03
    3182:	3c 81       	ldd	r19, Y+4	; 0x04
    3184:	22 30       	cpi	r18, 0x02	; 2
    3186:	31 05       	cpc	r19, r1
    3188:	2c f4       	brge	.+10     	; 0x3194 <Dio_vidPullUpEnalple+0x38>
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	9c 81       	ldd	r25, Y+4	; 0x04
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	61 f0       	breq	.+24     	; 0x31aa <Dio_vidPullUpEnalple+0x4e>
    3192:	5a c0       	rjmp	.+180    	; 0x3248 <Dio_vidPullUpEnalple+0xec>
    3194:	2b 81       	ldd	r18, Y+3	; 0x03
    3196:	3c 81       	ldd	r19, Y+4	; 0x04
    3198:	22 30       	cpi	r18, 0x02	; 2
    319a:	31 05       	cpc	r19, r1
    319c:	71 f1       	breq	.+92     	; 0x31fa <Dio_vidPullUpEnalple+0x9e>
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	9c 81       	ldd	r25, Y+4	; 0x04
    31a2:	83 30       	cpi	r24, 0x03	; 3
    31a4:	91 05       	cpc	r25, r1
    31a6:	e9 f1       	breq	.+122    	; 0x3222 <Dio_vidPullUpEnalple+0xc6>
    31a8:	4f c0       	rjmp	.+158    	; 0x3248 <Dio_vidPullUpEnalple+0xec>
		{
		case DIO_PORTA:
			SET_BIT(DIO_PORTA_REG,pin);
    31aa:	ab e3       	ldi	r26, 0x3B	; 59
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	eb e3       	ldi	r30, 0x3B	; 59
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	48 2f       	mov	r20, r24
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 2e       	mov	r0, r18
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <Dio_vidPullUpEnalple+0x6c>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <Dio_vidPullUpEnalple+0x68>
    31cc:	84 2b       	or	r24, r20
    31ce:	8c 93       	st	X, r24
    31d0:	3b c0       	rjmp	.+118    	; 0x3248 <Dio_vidPullUpEnalple+0xec>
			break;

		case DIO_PORTB:
			SET_BIT(DIO_PORTB_REG,pin);
    31d2:	a8 e3       	ldi	r26, 0x38	; 56
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e8 e3       	ldi	r30, 0x38	; 56
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	48 2f       	mov	r20, r24
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	02 2e       	mov	r0, r18
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <Dio_vidPullUpEnalple+0x94>
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	0a 94       	dec	r0
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <Dio_vidPullUpEnalple+0x90>
    31f4:	84 2b       	or	r24, r20
    31f6:	8c 93       	st	X, r24
    31f8:	27 c0       	rjmp	.+78     	; 0x3248 <Dio_vidPullUpEnalple+0xec>
			break;

		case DIO_PORTC:
			SET_BIT(DIO_PORTC_REG,pin);
    31fa:	a5 e3       	ldi	r26, 0x35	; 53
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e5 e3       	ldi	r30, 0x35	; 53
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	48 2f       	mov	r20, r24
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	02 2e       	mov	r0, r18
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <Dio_vidPullUpEnalple+0xbc>
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	0a 94       	dec	r0
    321a:	e2 f7       	brpl	.-8      	; 0x3214 <Dio_vidPullUpEnalple+0xb8>
    321c:	84 2b       	or	r24, r20
    321e:	8c 93       	st	X, r24
    3220:	13 c0       	rjmp	.+38     	; 0x3248 <Dio_vidPullUpEnalple+0xec>
			break;

		case DIO_PORTD:
			SET_BIT(DIO_PORTD_REG,pin);
    3222:	a2 e3       	ldi	r26, 0x32	; 50
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e2 e3       	ldi	r30, 0x32	; 50
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	48 2f       	mov	r20, r24
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	02 2e       	mov	r0, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <Dio_vidPullUpEnalple+0xe4>
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	0a 94       	dec	r0
    3242:	e2 f7       	brpl	.-8      	; 0x323c <Dio_vidPullUpEnalple+0xe0>
    3244:	84 2b       	or	r24, r20
    3246:	8c 93       	st	X, r24
			break;
		}
}
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <ADC_vidInit>:

#include "ADC.h"
#include "Bit_Math.h"

void ADC_vidInit(void)
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
	// Enable adc
	SET_BIT(ADC_ADCSRA_REG , 7);
    325e:	a6 e2       	ldi	r26, 0x26	; 38
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e6 e2       	ldi	r30, 0x26	; 38
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	80 68       	ori	r24, 0x80	; 128
    326a:	8c 93       	st	X, r24
	// select Verf+
	SET_BIT(ADC_ADMUX_REG , 6);
    326c:	a7 e2       	ldi	r26, 0x27	; 39
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e7 e2       	ldi	r30, 0x27	; 39
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	80 64       	ori	r24, 0x40	; 64
    3278:	8c 93       	st	X, r24
	CLEAR_BIT(ADC_ADMUX_REG , 7);
    327a:	a7 e2       	ldi	r26, 0x27	; 39
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e7 e2       	ldi	r30, 0x27	; 39
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	8f 77       	andi	r24, 0x7F	; 127
    3286:	8c 93       	st	X, r24
	//select prescaler factor /128
	SET_BIT(ADC_ADCSRA_REG , 0);
    3288:	a6 e2       	ldi	r26, 0x26	; 38
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e6 e2       	ldi	r30, 0x26	; 38
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	81 60       	ori	r24, 0x01	; 1
    3294:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG , 1);
    3296:	a6 e2       	ldi	r26, 0x26	; 38
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e6 e2       	ldi	r30, 0x26	; 38
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	82 60       	ori	r24, 0x02	; 2
    32a2:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG , 2);
    32a4:	a6 e2       	ldi	r26, 0x26	; 38
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e6 e2       	ldi	r30, 0x26	; 38
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	84 60       	ori	r24, 0x04	; 4
    32b0:	8c 93       	st	X, r24
		//or
		//ADC_ADCSRA_REG |= 7;

}
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <ADC_f64ADCRead>:


f64 ADC_f64ADCRead (ADC_channelID_t channel)
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	27 97       	sbiw	r28, 0x07	; 7
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_ADCResult = 0;     //result to be returned
    32ce:	1e 82       	std	Y+6, r1	; 0x06
    32d0:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt = loc_ADCResult*ADC_step;
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	cc 01       	movw	r24, r24
    32d8:	a0 e0       	ldi	r26, 0x00	; 0
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	2a e9       	ldi	r18, 0x9A	; 154
    32ee:	39 e9       	ldi	r19, 0x99	; 153
    32f0:	49 e9       	ldi	r20, 0x99	; 153
    32f2:	50 e4       	ldi	r21, 0x40	; 64
    32f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	ab 83       	std	Y+3, r26	; 0x03
    3302:	bc 83       	std	Y+4, r27	; 0x04
	//select channel ADC1
	ADC_ADMUX_REG =(ADC_ADMUX_REG & 0xF8) | channel;
    3304:	a7 e2       	ldi	r26, 0x27	; 39
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	e7 e2       	ldi	r30, 0x27	; 39
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	98 2f       	mov	r25, r24
    3310:	98 7f       	andi	r25, 0xF8	; 248
    3312:	8f 81       	ldd	r24, Y+7	; 0x07
    3314:	89 2b       	or	r24, r25
    3316:	8c 93       	st	X, r24


	//set start conversion
	SET_BIT(ADC_ADCSRA_REG , 6);
    3318:	a6 e2       	ldi	r26, 0x26	; 38
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e6 e2       	ldi	r30, 0x26	; 38
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	80 64       	ori	r24, 0x40	; 64
    3324:	8c 93       	st	X, r24

	//wait on ADIF flag to be raised
	while ( CHECK_BIT(ADC_ADCSRA_REG , 4) != 1 )
    3326:	e6 e2       	ldi	r30, 0x26	; 38
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	80 81       	ld	r24, Z
    332c:	82 95       	swap	r24
    332e:	8f 70       	andi	r24, 0x0F	; 15
    3330:	88 2f       	mov	r24, r24
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	81 70       	andi	r24, 0x01	; 1
    3336:	90 70       	andi	r25, 0x00	; 0
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	a9 f3       	breq	.-22     	; 0x3326 <ADC_f64ADCRead+0x6e>
	{
		// DO nothing
	}
	// to clear the flag ,you should write 1 on the bit (related to AVR) , but the hardware will write 0 on the bit
	SET_BIT(ADC_ADCSRA_REG , 4); //to clear the interrupt flag
    333c:	a6 e2       	ldi	r26, 0x26	; 38
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e6 e2       	ldi	r30, 0x26	; 38
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	80 61       	ori	r24, 0x10	; 16
    3348:	8c 93       	st	X, r24

	//read ADCL and ADCH
	loc_ADCResult = (ADC_ADCL_REG)|(ADC_ADCH_REG << 8);
    334a:	e4 e2       	ldi	r30, 0x24	; 36
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	e5 e2       	ldi	r30, 0x25	; 37
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	98 2f       	mov	r25, r24
    3360:	88 27       	eor	r24, r24
    3362:	82 2b       	or	r24, r18
    3364:	93 2b       	or	r25, r19
    3366:	9e 83       	std	Y+6, r25	; 0x06
    3368:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_ADCResult *ADC_step;
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	cc 01       	movw	r24, r24
    3370:	a0 e0       	ldi	r26, 0x00	; 0
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	2a e9       	ldi	r18, 0x9A	; 154
    3386:	39 e9       	ldi	r19, 0x99	; 153
    3388:	49 e9       	ldi	r20, 0x99	; 153
    338a:	50 e4       	ldi	r21, 0x40	; 64
    338c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	9a 83       	std	Y+2, r25	; 0x02
    3398:	ab 83       	std	Y+3, r26	; 0x03
    339a:	bc 83       	std	Y+4, r27	; 0x04

	return loc_volt;
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	ab 81       	ldd	r26, Y+3	; 0x03
    33a2:	bc 81       	ldd	r27, Y+4	; 0x04
}
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	27 96       	adiw	r28, 0x07	; 7
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <__udivmodqi4>:
    33ba:	99 1b       	sub	r25, r25
    33bc:	79 e0       	ldi	r23, 0x09	; 9
    33be:	04 c0       	rjmp	.+8      	; 0x33c8 <__udivmodqi4_ep>

000033c0 <__udivmodqi4_loop>:
    33c0:	99 1f       	adc	r25, r25
    33c2:	96 17       	cp	r25, r22
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <__udivmodqi4_ep>
    33c6:	96 1b       	sub	r25, r22

000033c8 <__udivmodqi4_ep>:
    33c8:	88 1f       	adc	r24, r24
    33ca:	7a 95       	dec	r23
    33cc:	c9 f7       	brne	.-14     	; 0x33c0 <__udivmodqi4_loop>
    33ce:	80 95       	com	r24
    33d0:	08 95       	ret

000033d2 <__udivmodsi4>:
    33d2:	a1 e2       	ldi	r26, 0x21	; 33
    33d4:	1a 2e       	mov	r1, r26
    33d6:	aa 1b       	sub	r26, r26
    33d8:	bb 1b       	sub	r27, r27
    33da:	fd 01       	movw	r30, r26
    33dc:	0d c0       	rjmp	.+26     	; 0x33f8 <__udivmodsi4_ep>

000033de <__udivmodsi4_loop>:
    33de:	aa 1f       	adc	r26, r26
    33e0:	bb 1f       	adc	r27, r27
    33e2:	ee 1f       	adc	r30, r30
    33e4:	ff 1f       	adc	r31, r31
    33e6:	a2 17       	cp	r26, r18
    33e8:	b3 07       	cpc	r27, r19
    33ea:	e4 07       	cpc	r30, r20
    33ec:	f5 07       	cpc	r31, r21
    33ee:	20 f0       	brcs	.+8      	; 0x33f8 <__udivmodsi4_ep>
    33f0:	a2 1b       	sub	r26, r18
    33f2:	b3 0b       	sbc	r27, r19
    33f4:	e4 0b       	sbc	r30, r20
    33f6:	f5 0b       	sbc	r31, r21

000033f8 <__udivmodsi4_ep>:
    33f8:	66 1f       	adc	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	88 1f       	adc	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	1a 94       	dec	r1
    3402:	69 f7       	brne	.-38     	; 0x33de <__udivmodsi4_loop>
    3404:	60 95       	com	r22
    3406:	70 95       	com	r23
    3408:	80 95       	com	r24
    340a:	90 95       	com	r25
    340c:	9b 01       	movw	r18, r22
    340e:	ac 01       	movw	r20, r24
    3410:	bd 01       	movw	r22, r26
    3412:	cf 01       	movw	r24, r30
    3414:	08 95       	ret

00003416 <__prologue_saves__>:
    3416:	2f 92       	push	r2
    3418:	3f 92       	push	r3
    341a:	4f 92       	push	r4
    341c:	5f 92       	push	r5
    341e:	6f 92       	push	r6
    3420:	7f 92       	push	r7
    3422:	8f 92       	push	r8
    3424:	9f 92       	push	r9
    3426:	af 92       	push	r10
    3428:	bf 92       	push	r11
    342a:	cf 92       	push	r12
    342c:	df 92       	push	r13
    342e:	ef 92       	push	r14
    3430:	ff 92       	push	r15
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	ca 1b       	sub	r28, r26
    3440:	db 0b       	sbc	r29, r27
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	09 94       	ijmp

0000344e <__epilogue_restores__>:
    344e:	2a 88       	ldd	r2, Y+18	; 0x12
    3450:	39 88       	ldd	r3, Y+17	; 0x11
    3452:	48 88       	ldd	r4, Y+16	; 0x10
    3454:	5f 84       	ldd	r5, Y+15	; 0x0f
    3456:	6e 84       	ldd	r6, Y+14	; 0x0e
    3458:	7d 84       	ldd	r7, Y+13	; 0x0d
    345a:	8c 84       	ldd	r8, Y+12	; 0x0c
    345c:	9b 84       	ldd	r9, Y+11	; 0x0b
    345e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3460:	b9 84       	ldd	r11, Y+9	; 0x09
    3462:	c8 84       	ldd	r12, Y+8	; 0x08
    3464:	df 80       	ldd	r13, Y+7	; 0x07
    3466:	ee 80       	ldd	r14, Y+6	; 0x06
    3468:	fd 80       	ldd	r15, Y+5	; 0x05
    346a:	0c 81       	ldd	r16, Y+4	; 0x04
    346c:	1b 81       	ldd	r17, Y+3	; 0x03
    346e:	aa 81       	ldd	r26, Y+2	; 0x02
    3470:	b9 81       	ldd	r27, Y+1	; 0x01
    3472:	ce 0f       	add	r28, r30
    3474:	d1 1d       	adc	r29, r1
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	ed 01       	movw	r28, r26
    3482:	08 95       	ret

00003484 <sprintf>:
    3484:	ae e0       	ldi	r26, 0x0E	; 14
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e8 e4       	ldi	r30, 0x48	; 72
    348a:	fa e1       	ldi	r31, 0x1A	; 26
    348c:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__prologue_saves__+0x1c>
    3490:	0d 89       	ldd	r16, Y+21	; 0x15
    3492:	1e 89       	ldd	r17, Y+22	; 0x16
    3494:	86 e0       	ldi	r24, 0x06	; 6
    3496:	8c 83       	std	Y+4, r24	; 0x04
    3498:	1a 83       	std	Y+2, r17	; 0x02
    349a:	09 83       	std	Y+1, r16	; 0x01
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	9f e7       	ldi	r25, 0x7F	; 127
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
    34a4:	9e 01       	movw	r18, r28
    34a6:	27 5e       	subi	r18, 0xE7	; 231
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	ce 01       	movw	r24, r28
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	6f 89       	ldd	r22, Y+23	; 0x17
    34b0:	78 8d       	ldd	r23, Y+24	; 0x18
    34b2:	a9 01       	movw	r20, r18
    34b4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <vfprintf>
    34b8:	2f 81       	ldd	r18, Y+7	; 0x07
    34ba:	38 85       	ldd	r19, Y+8	; 0x08
    34bc:	02 0f       	add	r16, r18
    34be:	13 1f       	adc	r17, r19
    34c0:	f8 01       	movw	r30, r16
    34c2:	10 82       	st	Z, r1
    34c4:	2e 96       	adiw	r28, 0x0e	; 14
    34c6:	e4 e0       	ldi	r30, 0x04	; 4
    34c8:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__epilogue_restores__+0x1c>

000034cc <vfprintf>:
    34cc:	ab e0       	ldi	r26, 0x0B	; 11
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	ec e6       	ldi	r30, 0x6C	; 108
    34d2:	fa e1       	ldi	r31, 0x1A	; 26
    34d4:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
    34d8:	3c 01       	movw	r6, r24
    34da:	2b 01       	movw	r4, r22
    34dc:	5a 01       	movw	r10, r20
    34de:	fc 01       	movw	r30, r24
    34e0:	17 82       	std	Z+7, r1	; 0x07
    34e2:	16 82       	std	Z+6, r1	; 0x06
    34e4:	83 81       	ldd	r24, Z+3	; 0x03
    34e6:	81 fd       	sbrc	r24, 1
    34e8:	03 c0       	rjmp	.+6      	; 0x34f0 <vfprintf+0x24>
    34ea:	6f ef       	ldi	r22, 0xFF	; 255
    34ec:	7f ef       	ldi	r23, 0xFF	; 255
    34ee:	c6 c1       	rjmp	.+908    	; 0x387c <vfprintf+0x3b0>
    34f0:	9a e0       	ldi	r25, 0x0A	; 10
    34f2:	89 2e       	mov	r8, r25
    34f4:	1e 01       	movw	r2, r28
    34f6:	08 94       	sec
    34f8:	21 1c       	adc	r2, r1
    34fa:	31 1c       	adc	r3, r1
    34fc:	f3 01       	movw	r30, r6
    34fe:	23 81       	ldd	r18, Z+3	; 0x03
    3500:	f2 01       	movw	r30, r4
    3502:	23 fd       	sbrc	r18, 3
    3504:	85 91       	lpm	r24, Z+
    3506:	23 ff       	sbrs	r18, 3
    3508:	81 91       	ld	r24, Z+
    350a:	2f 01       	movw	r4, r30
    350c:	88 23       	and	r24, r24
    350e:	09 f4       	brne	.+2      	; 0x3512 <vfprintf+0x46>
    3510:	b2 c1       	rjmp	.+868    	; 0x3876 <vfprintf+0x3aa>
    3512:	85 32       	cpi	r24, 0x25	; 37
    3514:	39 f4       	brne	.+14     	; 0x3524 <vfprintf+0x58>
    3516:	23 fd       	sbrc	r18, 3
    3518:	85 91       	lpm	r24, Z+
    351a:	23 ff       	sbrs	r18, 3
    351c:	81 91       	ld	r24, Z+
    351e:	2f 01       	movw	r4, r30
    3520:	85 32       	cpi	r24, 0x25	; 37
    3522:	29 f4       	brne	.+10     	; 0x352e <vfprintf+0x62>
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	b3 01       	movw	r22, r6
    3528:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    352c:	e7 cf       	rjmp	.-50     	; 0x34fc <vfprintf+0x30>
    352e:	98 2f       	mov	r25, r24
    3530:	ff 24       	eor	r15, r15
    3532:	ee 24       	eor	r14, r14
    3534:	99 24       	eor	r9, r9
    3536:	ff e1       	ldi	r31, 0x1F	; 31
    3538:	ff 15       	cp	r31, r15
    353a:	d0 f0       	brcs	.+52     	; 0x3570 <vfprintf+0xa4>
    353c:	9b 32       	cpi	r25, 0x2B	; 43
    353e:	69 f0       	breq	.+26     	; 0x355a <vfprintf+0x8e>
    3540:	9c 32       	cpi	r25, 0x2C	; 44
    3542:	28 f4       	brcc	.+10     	; 0x354e <vfprintf+0x82>
    3544:	90 32       	cpi	r25, 0x20	; 32
    3546:	59 f0       	breq	.+22     	; 0x355e <vfprintf+0x92>
    3548:	93 32       	cpi	r25, 0x23	; 35
    354a:	91 f4       	brne	.+36     	; 0x3570 <vfprintf+0xa4>
    354c:	0e c0       	rjmp	.+28     	; 0x356a <vfprintf+0x9e>
    354e:	9d 32       	cpi	r25, 0x2D	; 45
    3550:	49 f0       	breq	.+18     	; 0x3564 <vfprintf+0x98>
    3552:	90 33       	cpi	r25, 0x30	; 48
    3554:	69 f4       	brne	.+26     	; 0x3570 <vfprintf+0xa4>
    3556:	41 e0       	ldi	r20, 0x01	; 1
    3558:	24 c0       	rjmp	.+72     	; 0x35a2 <vfprintf+0xd6>
    355a:	52 e0       	ldi	r21, 0x02	; 2
    355c:	f5 2a       	or	r15, r21
    355e:	84 e0       	ldi	r24, 0x04	; 4
    3560:	f8 2a       	or	r15, r24
    3562:	28 c0       	rjmp	.+80     	; 0x35b4 <vfprintf+0xe8>
    3564:	98 e0       	ldi	r25, 0x08	; 8
    3566:	f9 2a       	or	r15, r25
    3568:	25 c0       	rjmp	.+74     	; 0x35b4 <vfprintf+0xe8>
    356a:	e0 e1       	ldi	r30, 0x10	; 16
    356c:	fe 2a       	or	r15, r30
    356e:	22 c0       	rjmp	.+68     	; 0x35b4 <vfprintf+0xe8>
    3570:	f7 fc       	sbrc	r15, 7
    3572:	29 c0       	rjmp	.+82     	; 0x35c6 <vfprintf+0xfa>
    3574:	89 2f       	mov	r24, r25
    3576:	80 53       	subi	r24, 0x30	; 48
    3578:	8a 30       	cpi	r24, 0x0A	; 10
    357a:	70 f4       	brcc	.+28     	; 0x3598 <vfprintf+0xcc>
    357c:	f6 fe       	sbrs	r15, 6
    357e:	05 c0       	rjmp	.+10     	; 0x358a <vfprintf+0xbe>
    3580:	98 9c       	mul	r9, r8
    3582:	90 2c       	mov	r9, r0
    3584:	11 24       	eor	r1, r1
    3586:	98 0e       	add	r9, r24
    3588:	15 c0       	rjmp	.+42     	; 0x35b4 <vfprintf+0xe8>
    358a:	e8 9c       	mul	r14, r8
    358c:	e0 2c       	mov	r14, r0
    358e:	11 24       	eor	r1, r1
    3590:	e8 0e       	add	r14, r24
    3592:	f0 e2       	ldi	r31, 0x20	; 32
    3594:	ff 2a       	or	r15, r31
    3596:	0e c0       	rjmp	.+28     	; 0x35b4 <vfprintf+0xe8>
    3598:	9e 32       	cpi	r25, 0x2E	; 46
    359a:	29 f4       	brne	.+10     	; 0x35a6 <vfprintf+0xda>
    359c:	f6 fc       	sbrc	r15, 6
    359e:	6b c1       	rjmp	.+726    	; 0x3876 <vfprintf+0x3aa>
    35a0:	40 e4       	ldi	r20, 0x40	; 64
    35a2:	f4 2a       	or	r15, r20
    35a4:	07 c0       	rjmp	.+14     	; 0x35b4 <vfprintf+0xe8>
    35a6:	9c 36       	cpi	r25, 0x6C	; 108
    35a8:	19 f4       	brne	.+6      	; 0x35b0 <vfprintf+0xe4>
    35aa:	50 e8       	ldi	r21, 0x80	; 128
    35ac:	f5 2a       	or	r15, r21
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <vfprintf+0xe8>
    35b0:	98 36       	cpi	r25, 0x68	; 104
    35b2:	49 f4       	brne	.+18     	; 0x35c6 <vfprintf+0xfa>
    35b4:	f2 01       	movw	r30, r4
    35b6:	23 fd       	sbrc	r18, 3
    35b8:	95 91       	lpm	r25, Z+
    35ba:	23 ff       	sbrs	r18, 3
    35bc:	91 91       	ld	r25, Z+
    35be:	2f 01       	movw	r4, r30
    35c0:	99 23       	and	r25, r25
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <vfprintf+0xfa>
    35c4:	b8 cf       	rjmp	.-144    	; 0x3536 <vfprintf+0x6a>
    35c6:	89 2f       	mov	r24, r25
    35c8:	85 54       	subi	r24, 0x45	; 69
    35ca:	83 30       	cpi	r24, 0x03	; 3
    35cc:	18 f0       	brcs	.+6      	; 0x35d4 <vfprintf+0x108>
    35ce:	80 52       	subi	r24, 0x20	; 32
    35d0:	83 30       	cpi	r24, 0x03	; 3
    35d2:	38 f4       	brcc	.+14     	; 0x35e2 <vfprintf+0x116>
    35d4:	44 e0       	ldi	r20, 0x04	; 4
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	a4 0e       	add	r10, r20
    35da:	b5 1e       	adc	r11, r21
    35dc:	5f e3       	ldi	r21, 0x3F	; 63
    35de:	59 83       	std	Y+1, r21	; 0x01
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <vfprintf+0x134>
    35e2:	93 36       	cpi	r25, 0x63	; 99
    35e4:	31 f0       	breq	.+12     	; 0x35f2 <vfprintf+0x126>
    35e6:	93 37       	cpi	r25, 0x73	; 115
    35e8:	79 f0       	breq	.+30     	; 0x3608 <vfprintf+0x13c>
    35ea:	93 35       	cpi	r25, 0x53	; 83
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <vfprintf+0x124>
    35ee:	56 c0       	rjmp	.+172    	; 0x369c <vfprintf+0x1d0>
    35f0:	20 c0       	rjmp	.+64     	; 0x3632 <vfprintf+0x166>
    35f2:	f5 01       	movw	r30, r10
    35f4:	80 81       	ld	r24, Z
    35f6:	89 83       	std	Y+1, r24	; 0x01
    35f8:	42 e0       	ldi	r20, 0x02	; 2
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	a4 0e       	add	r10, r20
    35fe:	b5 1e       	adc	r11, r21
    3600:	61 01       	movw	r12, r2
    3602:	01 e0       	ldi	r16, 0x01	; 1
    3604:	10 e0       	ldi	r17, 0x00	; 0
    3606:	12 c0       	rjmp	.+36     	; 0x362c <vfprintf+0x160>
    3608:	f5 01       	movw	r30, r10
    360a:	c0 80       	ld	r12, Z
    360c:	d1 80       	ldd	r13, Z+1	; 0x01
    360e:	f6 fc       	sbrc	r15, 6
    3610:	03 c0       	rjmp	.+6      	; 0x3618 <vfprintf+0x14c>
    3612:	6f ef       	ldi	r22, 0xFF	; 255
    3614:	7f ef       	ldi	r23, 0xFF	; 255
    3616:	02 c0       	rjmp	.+4      	; 0x361c <vfprintf+0x150>
    3618:	69 2d       	mov	r22, r9
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	42 e0       	ldi	r20, 0x02	; 2
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	a4 0e       	add	r10, r20
    3622:	b5 1e       	adc	r11, r21
    3624:	c6 01       	movw	r24, r12
    3626:	0e 94 4e 1c 	call	0x389c	; 0x389c <strnlen>
    362a:	8c 01       	movw	r16, r24
    362c:	5f e7       	ldi	r21, 0x7F	; 127
    362e:	f5 22       	and	r15, r21
    3630:	14 c0       	rjmp	.+40     	; 0x365a <vfprintf+0x18e>
    3632:	f5 01       	movw	r30, r10
    3634:	c0 80       	ld	r12, Z
    3636:	d1 80       	ldd	r13, Z+1	; 0x01
    3638:	f6 fc       	sbrc	r15, 6
    363a:	03 c0       	rjmp	.+6      	; 0x3642 <vfprintf+0x176>
    363c:	6f ef       	ldi	r22, 0xFF	; 255
    363e:	7f ef       	ldi	r23, 0xFF	; 255
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <vfprintf+0x17a>
    3642:	69 2d       	mov	r22, r9
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	42 e0       	ldi	r20, 0x02	; 2
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	a4 0e       	add	r10, r20
    364c:	b5 1e       	adc	r11, r21
    364e:	c6 01       	movw	r24, r12
    3650:	0e 94 43 1c 	call	0x3886	; 0x3886 <strnlen_P>
    3654:	8c 01       	movw	r16, r24
    3656:	50 e8       	ldi	r21, 0x80	; 128
    3658:	f5 2a       	or	r15, r21
    365a:	f3 fe       	sbrs	r15, 3
    365c:	07 c0       	rjmp	.+14     	; 0x366c <vfprintf+0x1a0>
    365e:	1a c0       	rjmp	.+52     	; 0x3694 <vfprintf+0x1c8>
    3660:	80 e2       	ldi	r24, 0x20	; 32
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	b3 01       	movw	r22, r6
    3666:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    366a:	ea 94       	dec	r14
    366c:	8e 2d       	mov	r24, r14
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	08 17       	cp	r16, r24
    3672:	19 07       	cpc	r17, r25
    3674:	a8 f3       	brcs	.-22     	; 0x3660 <vfprintf+0x194>
    3676:	0e c0       	rjmp	.+28     	; 0x3694 <vfprintf+0x1c8>
    3678:	f6 01       	movw	r30, r12
    367a:	f7 fc       	sbrc	r15, 7
    367c:	85 91       	lpm	r24, Z+
    367e:	f7 fe       	sbrs	r15, 7
    3680:	81 91       	ld	r24, Z+
    3682:	6f 01       	movw	r12, r30
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	b3 01       	movw	r22, r6
    3688:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    368c:	e1 10       	cpse	r14, r1
    368e:	ea 94       	dec	r14
    3690:	01 50       	subi	r16, 0x01	; 1
    3692:	10 40       	sbci	r17, 0x00	; 0
    3694:	01 15       	cp	r16, r1
    3696:	11 05       	cpc	r17, r1
    3698:	79 f7       	brne	.-34     	; 0x3678 <vfprintf+0x1ac>
    369a:	ea c0       	rjmp	.+468    	; 0x3870 <vfprintf+0x3a4>
    369c:	94 36       	cpi	r25, 0x64	; 100
    369e:	11 f0       	breq	.+4      	; 0x36a4 <vfprintf+0x1d8>
    36a0:	99 36       	cpi	r25, 0x69	; 105
    36a2:	69 f5       	brne	.+90     	; 0x36fe <vfprintf+0x232>
    36a4:	f7 fe       	sbrs	r15, 7
    36a6:	08 c0       	rjmp	.+16     	; 0x36b8 <vfprintf+0x1ec>
    36a8:	f5 01       	movw	r30, r10
    36aa:	20 81       	ld	r18, Z
    36ac:	31 81       	ldd	r19, Z+1	; 0x01
    36ae:	42 81       	ldd	r20, Z+2	; 0x02
    36b0:	53 81       	ldd	r21, Z+3	; 0x03
    36b2:	84 e0       	ldi	r24, 0x04	; 4
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	0a c0       	rjmp	.+20     	; 0x36cc <vfprintf+0x200>
    36b8:	f5 01       	movw	r30, r10
    36ba:	80 81       	ld	r24, Z
    36bc:	91 81       	ldd	r25, Z+1	; 0x01
    36be:	9c 01       	movw	r18, r24
    36c0:	44 27       	eor	r20, r20
    36c2:	37 fd       	sbrc	r19, 7
    36c4:	40 95       	com	r20
    36c6:	54 2f       	mov	r21, r20
    36c8:	82 e0       	ldi	r24, 0x02	; 2
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a8 0e       	add	r10, r24
    36ce:	b9 1e       	adc	r11, r25
    36d0:	9f e6       	ldi	r25, 0x6F	; 111
    36d2:	f9 22       	and	r15, r25
    36d4:	57 ff       	sbrs	r21, 7
    36d6:	09 c0       	rjmp	.+18     	; 0x36ea <vfprintf+0x21e>
    36d8:	50 95       	com	r21
    36da:	40 95       	com	r20
    36dc:	30 95       	com	r19
    36de:	21 95       	neg	r18
    36e0:	3f 4f       	sbci	r19, 0xFF	; 255
    36e2:	4f 4f       	sbci	r20, 0xFF	; 255
    36e4:	5f 4f       	sbci	r21, 0xFF	; 255
    36e6:	e0 e8       	ldi	r30, 0x80	; 128
    36e8:	fe 2a       	or	r15, r30
    36ea:	ca 01       	movw	r24, r20
    36ec:	b9 01       	movw	r22, r18
    36ee:	a1 01       	movw	r20, r2
    36f0:	2a e0       	ldi	r18, 0x0A	; 10
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	0e 94 85 1c 	call	0x390a	; 0x390a <__ultoa_invert>
    36f8:	d8 2e       	mov	r13, r24
    36fa:	d2 18       	sub	r13, r2
    36fc:	40 c0       	rjmp	.+128    	; 0x377e <vfprintf+0x2b2>
    36fe:	95 37       	cpi	r25, 0x75	; 117
    3700:	29 f4       	brne	.+10     	; 0x370c <vfprintf+0x240>
    3702:	1f 2d       	mov	r17, r15
    3704:	1f 7e       	andi	r17, 0xEF	; 239
    3706:	2a e0       	ldi	r18, 0x0A	; 10
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	1d c0       	rjmp	.+58     	; 0x3746 <vfprintf+0x27a>
    370c:	1f 2d       	mov	r17, r15
    370e:	19 7f       	andi	r17, 0xF9	; 249
    3710:	9f 36       	cpi	r25, 0x6F	; 111
    3712:	61 f0       	breq	.+24     	; 0x372c <vfprintf+0x260>
    3714:	90 37       	cpi	r25, 0x70	; 112
    3716:	20 f4       	brcc	.+8      	; 0x3720 <vfprintf+0x254>
    3718:	98 35       	cpi	r25, 0x58	; 88
    371a:	09 f0       	breq	.+2      	; 0x371e <vfprintf+0x252>
    371c:	ac c0       	rjmp	.+344    	; 0x3876 <vfprintf+0x3aa>
    371e:	0f c0       	rjmp	.+30     	; 0x373e <vfprintf+0x272>
    3720:	90 37       	cpi	r25, 0x70	; 112
    3722:	39 f0       	breq	.+14     	; 0x3732 <vfprintf+0x266>
    3724:	98 37       	cpi	r25, 0x78	; 120
    3726:	09 f0       	breq	.+2      	; 0x372a <vfprintf+0x25e>
    3728:	a6 c0       	rjmp	.+332    	; 0x3876 <vfprintf+0x3aa>
    372a:	04 c0       	rjmp	.+8      	; 0x3734 <vfprintf+0x268>
    372c:	28 e0       	ldi	r18, 0x08	; 8
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	0a c0       	rjmp	.+20     	; 0x3746 <vfprintf+0x27a>
    3732:	10 61       	ori	r17, 0x10	; 16
    3734:	14 fd       	sbrc	r17, 4
    3736:	14 60       	ori	r17, 0x04	; 4
    3738:	20 e1       	ldi	r18, 0x10	; 16
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	04 c0       	rjmp	.+8      	; 0x3746 <vfprintf+0x27a>
    373e:	14 fd       	sbrc	r17, 4
    3740:	16 60       	ori	r17, 0x06	; 6
    3742:	20 e1       	ldi	r18, 0x10	; 16
    3744:	32 e0       	ldi	r19, 0x02	; 2
    3746:	17 ff       	sbrs	r17, 7
    3748:	08 c0       	rjmp	.+16     	; 0x375a <vfprintf+0x28e>
    374a:	f5 01       	movw	r30, r10
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	44 e0       	ldi	r20, 0x04	; 4
    3756:	50 e0       	ldi	r21, 0x00	; 0
    3758:	08 c0       	rjmp	.+16     	; 0x376a <vfprintf+0x29e>
    375a:	f5 01       	movw	r30, r10
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	bc 01       	movw	r22, r24
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	42 e0       	ldi	r20, 0x02	; 2
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	a4 0e       	add	r10, r20
    376c:	b5 1e       	adc	r11, r21
    376e:	a1 01       	movw	r20, r2
    3770:	0e 94 85 1c 	call	0x390a	; 0x390a <__ultoa_invert>
    3774:	d8 2e       	mov	r13, r24
    3776:	d2 18       	sub	r13, r2
    3778:	8f e7       	ldi	r24, 0x7F	; 127
    377a:	f8 2e       	mov	r15, r24
    377c:	f1 22       	and	r15, r17
    377e:	f6 fe       	sbrs	r15, 6
    3780:	0b c0       	rjmp	.+22     	; 0x3798 <vfprintf+0x2cc>
    3782:	5e ef       	ldi	r21, 0xFE	; 254
    3784:	f5 22       	and	r15, r21
    3786:	d9 14       	cp	r13, r9
    3788:	38 f4       	brcc	.+14     	; 0x3798 <vfprintf+0x2cc>
    378a:	f4 fe       	sbrs	r15, 4
    378c:	07 c0       	rjmp	.+14     	; 0x379c <vfprintf+0x2d0>
    378e:	f2 fc       	sbrc	r15, 2
    3790:	05 c0       	rjmp	.+10     	; 0x379c <vfprintf+0x2d0>
    3792:	8f ee       	ldi	r24, 0xEF	; 239
    3794:	f8 22       	and	r15, r24
    3796:	02 c0       	rjmp	.+4      	; 0x379c <vfprintf+0x2d0>
    3798:	1d 2d       	mov	r17, r13
    379a:	01 c0       	rjmp	.+2      	; 0x379e <vfprintf+0x2d2>
    379c:	19 2d       	mov	r17, r9
    379e:	f4 fe       	sbrs	r15, 4
    37a0:	0d c0       	rjmp	.+26     	; 0x37bc <vfprintf+0x2f0>
    37a2:	fe 01       	movw	r30, r28
    37a4:	ed 0d       	add	r30, r13
    37a6:	f1 1d       	adc	r31, r1
    37a8:	80 81       	ld	r24, Z
    37aa:	80 33       	cpi	r24, 0x30	; 48
    37ac:	19 f4       	brne	.+6      	; 0x37b4 <vfprintf+0x2e8>
    37ae:	99 ee       	ldi	r25, 0xE9	; 233
    37b0:	f9 22       	and	r15, r25
    37b2:	08 c0       	rjmp	.+16     	; 0x37c4 <vfprintf+0x2f8>
    37b4:	1f 5f       	subi	r17, 0xFF	; 255
    37b6:	f2 fe       	sbrs	r15, 2
    37b8:	05 c0       	rjmp	.+10     	; 0x37c4 <vfprintf+0x2f8>
    37ba:	03 c0       	rjmp	.+6      	; 0x37c2 <vfprintf+0x2f6>
    37bc:	8f 2d       	mov	r24, r15
    37be:	86 78       	andi	r24, 0x86	; 134
    37c0:	09 f0       	breq	.+2      	; 0x37c4 <vfprintf+0x2f8>
    37c2:	1f 5f       	subi	r17, 0xFF	; 255
    37c4:	0f 2d       	mov	r16, r15
    37c6:	f3 fc       	sbrc	r15, 3
    37c8:	14 c0       	rjmp	.+40     	; 0x37f2 <vfprintf+0x326>
    37ca:	f0 fe       	sbrs	r15, 0
    37cc:	0f c0       	rjmp	.+30     	; 0x37ec <vfprintf+0x320>
    37ce:	1e 15       	cp	r17, r14
    37d0:	10 f0       	brcs	.+4      	; 0x37d6 <vfprintf+0x30a>
    37d2:	9d 2c       	mov	r9, r13
    37d4:	0b c0       	rjmp	.+22     	; 0x37ec <vfprintf+0x320>
    37d6:	9d 2c       	mov	r9, r13
    37d8:	9e 0c       	add	r9, r14
    37da:	91 1a       	sub	r9, r17
    37dc:	1e 2d       	mov	r17, r14
    37de:	06 c0       	rjmp	.+12     	; 0x37ec <vfprintf+0x320>
    37e0:	80 e2       	ldi	r24, 0x20	; 32
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	b3 01       	movw	r22, r6
    37e6:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    37ea:	1f 5f       	subi	r17, 0xFF	; 255
    37ec:	1e 15       	cp	r17, r14
    37ee:	c0 f3       	brcs	.-16     	; 0x37e0 <vfprintf+0x314>
    37f0:	04 c0       	rjmp	.+8      	; 0x37fa <vfprintf+0x32e>
    37f2:	1e 15       	cp	r17, r14
    37f4:	10 f4       	brcc	.+4      	; 0x37fa <vfprintf+0x32e>
    37f6:	e1 1a       	sub	r14, r17
    37f8:	01 c0       	rjmp	.+2      	; 0x37fc <vfprintf+0x330>
    37fa:	ee 24       	eor	r14, r14
    37fc:	04 ff       	sbrs	r16, 4
    37fe:	0f c0       	rjmp	.+30     	; 0x381e <vfprintf+0x352>
    3800:	80 e3       	ldi	r24, 0x30	; 48
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	b3 01       	movw	r22, r6
    3806:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    380a:	02 ff       	sbrs	r16, 2
    380c:	1d c0       	rjmp	.+58     	; 0x3848 <vfprintf+0x37c>
    380e:	01 fd       	sbrc	r16, 1
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <vfprintf+0x34c>
    3812:	88 e7       	ldi	r24, 0x78	; 120
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	0e c0       	rjmp	.+28     	; 0x3834 <vfprintf+0x368>
    3818:	88 e5       	ldi	r24, 0x58	; 88
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	0b c0       	rjmp	.+22     	; 0x3834 <vfprintf+0x368>
    381e:	80 2f       	mov	r24, r16
    3820:	86 78       	andi	r24, 0x86	; 134
    3822:	91 f0       	breq	.+36     	; 0x3848 <vfprintf+0x37c>
    3824:	01 ff       	sbrs	r16, 1
    3826:	02 c0       	rjmp	.+4      	; 0x382c <vfprintf+0x360>
    3828:	8b e2       	ldi	r24, 0x2B	; 43
    382a:	01 c0       	rjmp	.+2      	; 0x382e <vfprintf+0x362>
    382c:	80 e2       	ldi	r24, 0x20	; 32
    382e:	f7 fc       	sbrc	r15, 7
    3830:	8d e2       	ldi	r24, 0x2D	; 45
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	b3 01       	movw	r22, r6
    3836:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    383a:	06 c0       	rjmp	.+12     	; 0x3848 <vfprintf+0x37c>
    383c:	80 e3       	ldi	r24, 0x30	; 48
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	b3 01       	movw	r22, r6
    3842:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    3846:	9a 94       	dec	r9
    3848:	d9 14       	cp	r13, r9
    384a:	c0 f3       	brcs	.-16     	; 0x383c <vfprintf+0x370>
    384c:	da 94       	dec	r13
    384e:	f1 01       	movw	r30, r2
    3850:	ed 0d       	add	r30, r13
    3852:	f1 1d       	adc	r31, r1
    3854:	80 81       	ld	r24, Z
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	b3 01       	movw	r22, r6
    385a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    385e:	dd 20       	and	r13, r13
    3860:	a9 f7       	brne	.-22     	; 0x384c <vfprintf+0x380>
    3862:	06 c0       	rjmp	.+12     	; 0x3870 <vfprintf+0x3a4>
    3864:	80 e2       	ldi	r24, 0x20	; 32
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	b3 01       	movw	r22, r6
    386a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <fputc>
    386e:	ea 94       	dec	r14
    3870:	ee 20       	and	r14, r14
    3872:	c1 f7       	brne	.-16     	; 0x3864 <vfprintf+0x398>
    3874:	43 ce       	rjmp	.-890    	; 0x34fc <vfprintf+0x30>
    3876:	f3 01       	movw	r30, r6
    3878:	66 81       	ldd	r22, Z+6	; 0x06
    387a:	77 81       	ldd	r23, Z+7	; 0x07
    387c:	cb 01       	movw	r24, r22
    387e:	2b 96       	adiw	r28, 0x0b	; 11
    3880:	e2 e1       	ldi	r30, 0x12	; 18
    3882:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00003886 <strnlen_P>:
    3886:	fc 01       	movw	r30, r24
    3888:	05 90       	lpm	r0, Z+
    388a:	61 50       	subi	r22, 0x01	; 1
    388c:	70 40       	sbci	r23, 0x00	; 0
    388e:	01 10       	cpse	r0, r1
    3890:	d8 f7       	brcc	.-10     	; 0x3888 <strnlen_P+0x2>
    3892:	80 95       	com	r24
    3894:	90 95       	com	r25
    3896:	8e 0f       	add	r24, r30
    3898:	9f 1f       	adc	r25, r31
    389a:	08 95       	ret

0000389c <strnlen>:
    389c:	fc 01       	movw	r30, r24
    389e:	61 50       	subi	r22, 0x01	; 1
    38a0:	70 40       	sbci	r23, 0x00	; 0
    38a2:	01 90       	ld	r0, Z+
    38a4:	01 10       	cpse	r0, r1
    38a6:	d8 f7       	brcc	.-10     	; 0x389e <strnlen+0x2>
    38a8:	80 95       	com	r24
    38aa:	90 95       	com	r25
    38ac:	8e 0f       	add	r24, r30
    38ae:	9f 1f       	adc	r25, r31
    38b0:	08 95       	ret

000038b2 <fputc>:
    38b2:	0f 93       	push	r16
    38b4:	1f 93       	push	r17
    38b6:	cf 93       	push	r28
    38b8:	df 93       	push	r29
    38ba:	8c 01       	movw	r16, r24
    38bc:	eb 01       	movw	r28, r22
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	81 ff       	sbrs	r24, 1
    38c2:	1b c0       	rjmp	.+54     	; 0x38fa <fputc+0x48>
    38c4:	82 ff       	sbrs	r24, 2
    38c6:	0d c0       	rjmp	.+26     	; 0x38e2 <fputc+0x30>
    38c8:	2e 81       	ldd	r18, Y+6	; 0x06
    38ca:	3f 81       	ldd	r19, Y+7	; 0x07
    38cc:	8c 81       	ldd	r24, Y+4	; 0x04
    38ce:	9d 81       	ldd	r25, Y+5	; 0x05
    38d0:	28 17       	cp	r18, r24
    38d2:	39 07       	cpc	r19, r25
    38d4:	64 f4       	brge	.+24     	; 0x38ee <fputc+0x3c>
    38d6:	e8 81       	ld	r30, Y
    38d8:	f9 81       	ldd	r31, Y+1	; 0x01
    38da:	01 93       	st	Z+, r16
    38dc:	f9 83       	std	Y+1, r31	; 0x01
    38de:	e8 83       	st	Y, r30
    38e0:	06 c0       	rjmp	.+12     	; 0x38ee <fputc+0x3c>
    38e2:	e8 85       	ldd	r30, Y+8	; 0x08
    38e4:	f9 85       	ldd	r31, Y+9	; 0x09
    38e6:	80 2f       	mov	r24, r16
    38e8:	09 95       	icall
    38ea:	89 2b       	or	r24, r25
    38ec:	31 f4       	brne	.+12     	; 0x38fa <fputc+0x48>
    38ee:	8e 81       	ldd	r24, Y+6	; 0x06
    38f0:	9f 81       	ldd	r25, Y+7	; 0x07
    38f2:	01 96       	adiw	r24, 0x01	; 1
    38f4:	9f 83       	std	Y+7, r25	; 0x07
    38f6:	8e 83       	std	Y+6, r24	; 0x06
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <fputc+0x4c>
    38fa:	0f ef       	ldi	r16, 0xFF	; 255
    38fc:	1f ef       	ldi	r17, 0xFF	; 255
    38fe:	c8 01       	movw	r24, r16
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	08 95       	ret

0000390a <__ultoa_invert>:
    390a:	fa 01       	movw	r30, r20
    390c:	aa 27       	eor	r26, r26
    390e:	28 30       	cpi	r18, 0x08	; 8
    3910:	51 f1       	breq	.+84     	; 0x3966 <__ultoa_invert+0x5c>
    3912:	20 31       	cpi	r18, 0x10	; 16
    3914:	81 f1       	breq	.+96     	; 0x3976 <__ultoa_invert+0x6c>
    3916:	e8 94       	clt
    3918:	6f 93       	push	r22
    391a:	6e 7f       	andi	r22, 0xFE	; 254
    391c:	6e 5f       	subi	r22, 0xFE	; 254
    391e:	7f 4f       	sbci	r23, 0xFF	; 255
    3920:	8f 4f       	sbci	r24, 0xFF	; 255
    3922:	9f 4f       	sbci	r25, 0xFF	; 255
    3924:	af 4f       	sbci	r26, 0xFF	; 255
    3926:	b1 e0       	ldi	r27, 0x01	; 1
    3928:	3e d0       	rcall	.+124    	; 0x39a6 <__ultoa_invert+0x9c>
    392a:	b4 e0       	ldi	r27, 0x04	; 4
    392c:	3c d0       	rcall	.+120    	; 0x39a6 <__ultoa_invert+0x9c>
    392e:	67 0f       	add	r22, r23
    3930:	78 1f       	adc	r23, r24
    3932:	89 1f       	adc	r24, r25
    3934:	9a 1f       	adc	r25, r26
    3936:	a1 1d       	adc	r26, r1
    3938:	68 0f       	add	r22, r24
    393a:	79 1f       	adc	r23, r25
    393c:	8a 1f       	adc	r24, r26
    393e:	91 1d       	adc	r25, r1
    3940:	a1 1d       	adc	r26, r1
    3942:	6a 0f       	add	r22, r26
    3944:	71 1d       	adc	r23, r1
    3946:	81 1d       	adc	r24, r1
    3948:	91 1d       	adc	r25, r1
    394a:	a1 1d       	adc	r26, r1
    394c:	20 d0       	rcall	.+64     	; 0x398e <__ultoa_invert+0x84>
    394e:	09 f4       	brne	.+2      	; 0x3952 <__ultoa_invert+0x48>
    3950:	68 94       	set
    3952:	3f 91       	pop	r19
    3954:	2a e0       	ldi	r18, 0x0A	; 10
    3956:	26 9f       	mul	r18, r22
    3958:	11 24       	eor	r1, r1
    395a:	30 19       	sub	r19, r0
    395c:	30 5d       	subi	r19, 0xD0	; 208
    395e:	31 93       	st	Z+, r19
    3960:	de f6       	brtc	.-74     	; 0x3918 <__ultoa_invert+0xe>
    3962:	cf 01       	movw	r24, r30
    3964:	08 95       	ret
    3966:	46 2f       	mov	r20, r22
    3968:	47 70       	andi	r20, 0x07	; 7
    396a:	40 5d       	subi	r20, 0xD0	; 208
    396c:	41 93       	st	Z+, r20
    396e:	b3 e0       	ldi	r27, 0x03	; 3
    3970:	0f d0       	rcall	.+30     	; 0x3990 <__ultoa_invert+0x86>
    3972:	c9 f7       	brne	.-14     	; 0x3966 <__ultoa_invert+0x5c>
    3974:	f6 cf       	rjmp	.-20     	; 0x3962 <__ultoa_invert+0x58>
    3976:	46 2f       	mov	r20, r22
    3978:	4f 70       	andi	r20, 0x0F	; 15
    397a:	40 5d       	subi	r20, 0xD0	; 208
    397c:	4a 33       	cpi	r20, 0x3A	; 58
    397e:	18 f0       	brcs	.+6      	; 0x3986 <__ultoa_invert+0x7c>
    3980:	49 5d       	subi	r20, 0xD9	; 217
    3982:	31 fd       	sbrc	r19, 1
    3984:	40 52       	subi	r20, 0x20	; 32
    3986:	41 93       	st	Z+, r20
    3988:	02 d0       	rcall	.+4      	; 0x398e <__ultoa_invert+0x84>
    398a:	a9 f7       	brne	.-22     	; 0x3976 <__ultoa_invert+0x6c>
    398c:	ea cf       	rjmp	.-44     	; 0x3962 <__ultoa_invert+0x58>
    398e:	b4 e0       	ldi	r27, 0x04	; 4
    3990:	a6 95       	lsr	r26
    3992:	97 95       	ror	r25
    3994:	87 95       	ror	r24
    3996:	77 95       	ror	r23
    3998:	67 95       	ror	r22
    399a:	ba 95       	dec	r27
    399c:	c9 f7       	brne	.-14     	; 0x3990 <__ultoa_invert+0x86>
    399e:	00 97       	sbiw	r24, 0x00	; 0
    39a0:	61 05       	cpc	r22, r1
    39a2:	71 05       	cpc	r23, r1
    39a4:	08 95       	ret
    39a6:	9b 01       	movw	r18, r22
    39a8:	ac 01       	movw	r20, r24
    39aa:	0a 2e       	mov	r0, r26
    39ac:	06 94       	lsr	r0
    39ae:	57 95       	ror	r21
    39b0:	47 95       	ror	r20
    39b2:	37 95       	ror	r19
    39b4:	27 95       	ror	r18
    39b6:	ba 95       	dec	r27
    39b8:	c9 f7       	brne	.-14     	; 0x39ac <__ultoa_invert+0xa2>
    39ba:	62 0f       	add	r22, r18
    39bc:	73 1f       	adc	r23, r19
    39be:	84 1f       	adc	r24, r20
    39c0:	95 1f       	adc	r25, r21
    39c2:	a0 1d       	adc	r26, r0
    39c4:	08 95       	ret

000039c6 <_exit>:
    39c6:	f8 94       	cli

000039c8 <__stop_program>:
    39c8:	ff cf       	rjmp	.-2      	; 0x39c8 <__stop_program>
